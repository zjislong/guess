%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.1.9

-ifndef(proto).
-define(proto, true).

-define(proto_gpb_version, "4.1.9").

-ifndef('P_TARGET_PB_H').
-define('P_TARGET_PB_H', true).
-record(p_target,
        {pos                    :: non_neg_integer(), % = 1, 32 bits
         target_id              :: iolist(),        % = 2
         target_name            :: iolist(),        % = 3
         target_head            :: iolist(),        % = 4
         target_gender          :: iolist()         % = 5
        }).
-endif.

-ifndef('S_BATTLE_START_PB_H').
-define('S_BATTLE_START_PB_H', true).
-record(s_battle_start,
        {targets = []           :: [#p_target{}] | undefined % = 1
        }).
-endif.

-ifndef('C_PLAYER_INFO_PB_H').
-define('C_PLAYER_INFO_PB_H', true).
-record(c_player_info,
        {gold                   :: non_neg_integer(), % = 1, 32 bits
         score                  :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('P_SCORE_PB_H').
-define('P_SCORE_PB_H', true).
-record(p_score,
        {id                     :: non_neg_integer(), % = 1, 32 bits
         player_id              :: iolist(),        % = 2
         score                  :: non_neg_integer() % = 3, 32 bits
        }).
-endif.

-ifndef('S_BATTLE_END_PB_H').
-define('S_BATTLE_END_PB_H', true).
-record(s_battle_end,
        {mvp                    :: iolist(),        % = 1
         higher                 :: iolist(),        % = 2
         score = []             :: [#p_score{}] | undefined % = 3
        }).
-endif.

-ifndef('C_GET_PLAYER_ID_PB_H').
-define('C_GET_PLAYER_ID_PB_H', true).
-record(c_get_player_id,
        {code                   :: iolist()         % = 1
        }).
-endif.

-ifndef('P_RANK_PB_H').
-define('P_RANK_PB_H', true).
-record(p_rank,
        {key                    :: iolist(),        % = 1
         value                  :: non_neg_integer(), % = 2, 32 bits
         rank                   :: non_neg_integer(), % = 3, 32 bits
         title                  :: non_neg_integer(), % = 4, 32 bits
         name                   :: iolist(),        % = 5
         head                   :: iolist(),        % = 6
         gender                 :: iolist()         % = 7
        }).
-endif.

-ifndef('S_CANCEL_MATCH_PB_H').
-define('S_CANCEL_MATCH_PB_H', true).
-record(s_cancel_match,
        {
        }).
-endif.

-ifndef('S_FOLLOW_CARD_PB_H').
-define('S_FOLLOW_CARD_PB_H', true).
-record(s_follow_card,
        {pos                    :: non_neg_integer(), % = 1, 32 bits
         player_id              :: iolist()         % = 2
        }).
-endif.

-ifndef('C_START_MATCH_PB_H').
-define('C_START_MATCH_PB_H', true).
-record(c_start_match,
        {type                   :: non_neg_integer() % = 1, 32 bits
        }).
-endif.

-ifndef('C_HEART_PB_H').
-define('C_HEART_PB_H', true).
-record(c_heart,
        {
        }).
-endif.

-ifndef('S_SHOW_CARD_PB_H').
-define('S_SHOW_CARD_PB_H', true).
-record(s_show_card,
        {cardIDs = []           :: [non_neg_integer()] | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('S_VOTE_CARD_PB_H').
-define('S_VOTE_CARD_PB_H', true).
-record(s_vote_card,
        {pos                    :: non_neg_integer(), % = 1, 32 bits
         player_id              :: iolist(),        % = 2
         cardID                 :: non_neg_integer() % = 3, 32 bits
        }).
-endif.

-ifndef('S_SINGLE_GAME_END_PB_H').
-define('S_SINGLE_GAME_END_PB_H', true).
-record(s_single_game_end,
        {cardID                 :: non_neg_integer(), % = 1, 32 bits
         score = []             :: [#p_score{}] | undefined % = 2
        }).
-endif.

-ifndef('C_SPEAK_CARD_PB_H').
-define('C_SPEAK_CARD_PB_H', true).
-record(c_speak_card,
        {descript               :: iolist()         % = 1
        }).
-endif.

-ifndef('C_VOTE_CARD_PB_H').
-define('C_VOTE_CARD_PB_H', true).
-record(c_vote_card,
        {cardID                 :: non_neg_integer() % = 1, 32 bits
        }).
-endif.

-ifndef('S_GET_PLAYER_ID_PB_H').
-define('S_GET_PLAYER_ID_PB_H', true).
-record(s_get_player_id,
        {player_id              :: iolist()         % = 1
        }).
-endif.

-ifndef('C_FOLLOW_CARD_PB_H').
-define('C_FOLLOW_CARD_PB_H', true).
-record(c_follow_card,
        {cardID                 :: non_neg_integer() % = 1, 32 bits
        }).
-endif.

-ifndef('S_PICK_SPEAKER_PB_H').
-define('S_PICK_SPEAKER_PB_H', true).
-record(s_pick_speaker,
        {pos                    :: non_neg_integer(), % = 1, 32 bits
         player_id              :: iolist()         % = 2
        }).
-endif.

-ifndef('P_CARD_VOTE_PB_H').
-define('P_CARD_VOTE_PB_H', true).
-record(p_card_vote,
        {cardID                 :: non_neg_integer(), % = 1, 32 bits
         vote                   :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('C_PICK_CARD_PB_H').
-define('C_PICK_CARD_PB_H', true).
-record(c_pick_card,
        {cardID                 :: non_neg_integer() % = 1, 32 bits
        }).
-endif.

-ifndef('S_HEART_PB_H').
-define('S_HEART_PB_H', true).
-record(s_heart,
        {timestamp              :: non_neg_integer() % = 1, 32 bits
        }).
-endif.

-ifndef('C_RANK_INFO_PB_H').
-define('C_RANK_INFO_PB_H', true).
-record(c_rank_info,
        {tag                    :: iolist(),        % = 1
         rank                   :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('S_PICK_CARD_PB_H').
-define('S_PICK_CARD_PB_H', true).
-record(s_pick_card,
        {
        }).
-endif.

-ifndef('S_RANK_INFO_PB_H').
-define('S_RANK_INFO_PB_H', true).
-record(s_rank_info,
        {tag                    :: iolist(),        % = 1
         rank_self              :: #p_rank{},       % = 2
         rank_info = []         :: [#p_rank{}] | undefined % = 3
        }).
-endif.

-ifndef('S_PLAYER_INFO_PB_H').
-define('S_PLAYER_INFO_PB_H', true).
-record(s_player_info,
        {gold                   :: non_neg_integer(), % = 1, 32 bits
         score                  :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('P_ROOM_PB_H').
-define('P_ROOM_PB_H', true).
-record(p_room,
        {root_id                :: non_neg_integer(), % = 1, 32 bits
         type                   :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('S_LOGIN_PB_H').
-define('S_LOGIN_PB_H', true).
-record(s_login,
        {player_id              :: iolist()         % = 1
        }).
-endif.

-ifndef('S_WASH_CARD_PB_H').
-define('S_WASH_CARD_PB_H', true).
-record(s_wash_card,
        {cardIDs = []           :: [non_neg_integer()] | undefined % = 1, 32 bits
        }).
-endif.

-ifndef('S_BATTLE_STATUS_PB_H').
-define('S_BATTLE_STATUS_PB_H', true).
-record(s_battle_status,
        {status                 :: non_neg_integer(), % = 1, 32 bits
         end_time               :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('C_LOGIN_PB_H').
-define('C_LOGIN_PB_H', true).
-record(c_login,
        {player_id              :: iolist(),        % = 1
         name                   :: iolist(),        % = 2
         head                   :: iolist(),        % = 3
         gender                 :: iolist(),        % = 4
         city                   :: iolist(),        % = 5
         province               :: iolist(),        % = 6
         country                :: iolist()         % = 7
        }).
-endif.

-ifndef('S_SPEAK_CARD_PB_H').
-define('S_SPEAK_CARD_PB_H', true).
-record(s_speak_card,
        {descript               :: iolist()         % = 1
        }).
-endif.

-endif.
