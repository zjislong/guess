%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.1.9
-module(proto).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_msgID/1, enum_value_by_symbol_msgID/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("proto.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'msgID'() :: 'none' | 'c_get_player_id' | 's_get_player_id' | 'c_login' | 's_login' | 'c_heart' | 's_heart' | 'c_player_info' | 's_player_info' | 'c_start_match' | 's_cancel_match' | 's_battle_start' | 's_battle_state' | 's_wash_card' | 's_pick_speaker' | 'c_pick_card' | 's_pick_card' | 'c_speak_card' | 's_speak_card' | 'c_follow_card' | 's_follow_card' | 'c_show_card' | 'c_vote_card' | 's_vote_card' | 's_single_game_end' | 's_battle_end' | 'c_rank_info' | 's_rank_info'.
-export_type(['msgID'/0]).

%% message types
-type p_target() :: #p_target{}.
-type s_battle_start() :: #s_battle_start{}.
-type c_player_info() :: #c_player_info{}.
-type p_score() :: #p_score{}.
-type s_battle_end() :: #s_battle_end{}.
-type c_get_player_id() :: #c_get_player_id{}.
-type p_rank() :: #p_rank{}.
-type s_cancel_match() :: #s_cancel_match{}.
-type s_follow_card() :: #s_follow_card{}.
-type c_start_match() :: #c_start_match{}.
-type c_heart() :: #c_heart{}.
-type s_show_card() :: #s_show_card{}.
-type s_vote_card() :: #s_vote_card{}.
-type s_single_game_end() :: #s_single_game_end{}.
-type c_speak_card() :: #c_speak_card{}.
-type c_vote_card() :: #c_vote_card{}.
-type s_get_player_id() :: #s_get_player_id{}.
-type c_follow_card() :: #c_follow_card{}.
-type s_pick_speaker() :: #s_pick_speaker{}.
-type p_card_vote() :: #p_card_vote{}.
-type c_pick_card() :: #c_pick_card{}.
-type s_heart() :: #s_heart{}.
-type c_rank_info() :: #c_rank_info{}.
-type s_pick_card() :: #s_pick_card{}.
-type s_rank_info() :: #s_rank_info{}.
-type s_player_info() :: #s_player_info{}.
-type p_room() :: #p_room{}.
-type s_login() :: #s_login{}.
-type s_wash_card() :: #s_wash_card{}.
-type s_battle_status() :: #s_battle_status{}.
-type c_login() :: #c_login{}.
-type s_speak_card() :: #s_speak_card{}.
-export_type(['p_target'/0, 's_battle_start'/0, 'c_player_info'/0, 'p_score'/0, 's_battle_end'/0, 'c_get_player_id'/0, 'p_rank'/0, 's_cancel_match'/0, 's_follow_card'/0, 'c_start_match'/0, 'c_heart'/0, 's_show_card'/0, 's_vote_card'/0, 's_single_game_end'/0, 'c_speak_card'/0, 'c_vote_card'/0, 's_get_player_id'/0, 'c_follow_card'/0, 's_pick_speaker'/0, 'p_card_vote'/0, 'c_pick_card'/0, 's_heart'/0, 'c_rank_info'/0, 's_pick_card'/0, 's_rank_info'/0, 's_player_info'/0, 'p_room'/0, 's_login'/0, 's_wash_card'/0, 's_battle_status'/0, 'c_login'/0, 's_speak_card'/0]).

-spec encode_msg(#p_target{} | #s_battle_start{} | #c_player_info{} | #p_score{} | #s_battle_end{} | #c_get_player_id{} | #p_rank{} | #s_cancel_match{} | #s_follow_card{} | #c_start_match{} | #c_heart{} | #s_show_card{} | #s_vote_card{} | #s_single_game_end{} | #c_speak_card{} | #c_vote_card{} | #s_get_player_id{} | #c_follow_card{} | #s_pick_speaker{} | #p_card_vote{} | #c_pick_card{} | #s_heart{} | #c_rank_info{} | #s_pick_card{} | #s_rank_info{} | #s_player_info{} | #p_room{} | #s_login{} | #s_wash_card{} | #s_battle_status{} | #c_login{} | #s_speak_card{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#p_target{} | #s_battle_start{} | #c_player_info{} | #p_score{} | #s_battle_end{} | #c_get_player_id{} | #p_rank{} | #s_cancel_match{} | #s_follow_card{} | #c_start_match{} | #c_heart{} | #s_show_card{} | #s_vote_card{} | #s_single_game_end{} | #c_speak_card{} | #c_vote_card{} | #s_get_player_id{} | #c_follow_card{} | #s_pick_speaker{} | #p_card_vote{} | #c_pick_card{} | #s_heart{} | #c_rank_info{} | #s_pick_card{} | #s_rank_info{} | #s_player_info{} | #p_room{} | #s_login{} | #s_wash_card{} | #s_battle_status{} | #c_login{} | #s_speak_card{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #p_target{} -> e_msg_p_target(Msg, TrUserData);
      #s_battle_start{} ->
	  e_msg_s_battle_start(Msg, TrUserData);
      #c_player_info{} ->
	  e_msg_c_player_info(Msg, TrUserData);
      #p_score{} -> e_msg_p_score(Msg, TrUserData);
      #s_battle_end{} -> e_msg_s_battle_end(Msg, TrUserData);
      #c_get_player_id{} ->
	  e_msg_c_get_player_id(Msg, TrUserData);
      #p_rank{} -> e_msg_p_rank(Msg, TrUserData);
      #s_cancel_match{} ->
	  e_msg_s_cancel_match(Msg, TrUserData);
      #s_follow_card{} ->
	  e_msg_s_follow_card(Msg, TrUserData);
      #c_start_match{} ->
	  e_msg_c_start_match(Msg, TrUserData);
      #c_heart{} -> e_msg_c_heart(Msg, TrUserData);
      #s_show_card{} -> e_msg_s_show_card(Msg, TrUserData);
      #s_vote_card{} -> e_msg_s_vote_card(Msg, TrUserData);
      #s_single_game_end{} ->
	  e_msg_s_single_game_end(Msg, TrUserData);
      #c_speak_card{} -> e_msg_c_speak_card(Msg, TrUserData);
      #c_vote_card{} -> e_msg_c_vote_card(Msg, TrUserData);
      #s_get_player_id{} ->
	  e_msg_s_get_player_id(Msg, TrUserData);
      #c_follow_card{} ->
	  e_msg_c_follow_card(Msg, TrUserData);
      #s_pick_speaker{} ->
	  e_msg_s_pick_speaker(Msg, TrUserData);
      #p_card_vote{} -> e_msg_p_card_vote(Msg, TrUserData);
      #c_pick_card{} -> e_msg_c_pick_card(Msg, TrUserData);
      #s_heart{} -> e_msg_s_heart(Msg, TrUserData);
      #c_rank_info{} -> e_msg_c_rank_info(Msg, TrUserData);
      #s_pick_card{} -> e_msg_s_pick_card(Msg, TrUserData);
      #s_rank_info{} -> e_msg_s_rank_info(Msg, TrUserData);
      #s_player_info{} ->
	  e_msg_s_player_info(Msg, TrUserData);
      #p_room{} -> e_msg_p_room(Msg, TrUserData);
      #s_login{} -> e_msg_s_login(Msg, TrUserData);
      #s_wash_card{} -> e_msg_s_wash_card(Msg, TrUserData);
      #s_battle_status{} ->
	  e_msg_s_battle_status(Msg, TrUserData);
      #c_login{} -> e_msg_c_login(Msg, TrUserData);
      #s_speak_card{} -> e_msg_s_speak_card(Msg, TrUserData)
    end.



e_msg_p_target(Msg, TrUserData) ->
    e_msg_p_target(Msg, <<>>, TrUserData).


e_msg_p_target(#p_target{pos = F1, target_id = F2,
			 target_name = F3, target_head = F4,
			 target_gender = F5},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_string(TrF5, <<B4/binary, 42>>)
    end.

e_msg_s_battle_start(Msg, TrUserData) ->
    e_msg_s_battle_start(Msg, <<>>, TrUserData).


e_msg_s_battle_start(#s_battle_start{targets = F1}, Bin,
		     TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_s_battle_start_targets(TrF1, Bin, TrUserData)
      end
    end.

e_msg_c_player_info(Msg, TrUserData) ->
    e_msg_c_player_info(Msg, <<>>, TrUserData).


e_msg_c_player_info(#c_player_info{gold = F1,
				   score = F2},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_p_score(Msg, TrUserData) ->
    e_msg_p_score(Msg, <<>>, TrUserData).


e_msg_p_score(#p_score{id = F1, player_id = F2,
		       score = F3},
	      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_varint(TrF3, <<B2/binary, 24>>)
    end.

e_msg_s_battle_end(Msg, TrUserData) ->
    e_msg_s_battle_end(Msg, <<>>, TrUserData).


e_msg_s_battle_end(#s_battle_end{mvp = F1, higher = F2,
				 score = F3},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true -> e_field_s_battle_end_score(TrF3, B2, TrUserData)
      end
    end.

e_msg_c_get_player_id(Msg, TrUserData) ->
    e_msg_c_get_player_id(Msg, <<>>, TrUserData).


e_msg_c_get_player_id(#c_get_player_id{code = F1}, Bin,
		      TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_p_rank(Msg, TrUserData) ->
    e_msg_p_rank(Msg, <<>>, TrUserData).


e_msg_p_rank(#p_rank{key = F1, value = F2, rank = F3,
		     title = F4, name = F5, head = F6, gender = F7},
	     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_varint(TrF3, <<B2/binary, 24>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_varint(TrF4, <<B3/binary, 32>>)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_string(TrF5, <<B4/binary, 42>>)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_string(TrF6, <<B5/binary, 50>>)
	 end,
    begin
      TrF7 = id(F7, TrUserData),
      e_type_string(TrF7, <<B6/binary, 58>>)
    end.

e_msg_s_cancel_match(_Msg, _TrUserData) -> <<>>.

e_msg_s_follow_card(Msg, TrUserData) ->
    e_msg_s_follow_card(Msg, <<>>, TrUserData).


e_msg_s_follow_card(#s_follow_card{pos = F1,
				   player_id = F2},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>)
    end.

e_msg_c_start_match(Msg, TrUserData) ->
    e_msg_c_start_match(Msg, <<>>, TrUserData).


e_msg_c_start_match(#c_start_match{type = F1}, Bin,
		    TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_c_heart(_Msg, _TrUserData) -> <<>>.

e_msg_s_show_card(Msg, TrUserData) ->
    e_msg_s_show_card(Msg, <<>>, TrUserData).


e_msg_s_show_card(#s_show_card{cardIDs = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_s_show_card_cardIDs(TrF1, Bin, TrUserData)
      end
    end.

e_msg_s_vote_card(Msg, TrUserData) ->
    e_msg_s_vote_card(Msg, <<>>, TrUserData).


e_msg_s_vote_card(#s_vote_card{pos = F1, player_id = F2,
			       cardID = F3},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_varint(TrF3, <<B2/binary, 24>>)
    end.

e_msg_s_single_game_end(Msg, TrUserData) ->
    e_msg_s_single_game_end(Msg, <<>>, TrUserData).


e_msg_s_single_game_end(#s_single_game_end{cardID = F1,
					   score = F2},
			Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_s_single_game_end_score(TrF2, B1, TrUserData)
      end
    end.

e_msg_c_speak_card(Msg, TrUserData) ->
    e_msg_c_speak_card(Msg, <<>>, TrUserData).


e_msg_c_speak_card(#c_speak_card{descript = F1}, Bin,
		   TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_c_vote_card(Msg, TrUserData) ->
    e_msg_c_vote_card(Msg, <<>>, TrUserData).


e_msg_c_vote_card(#c_vote_card{cardID = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_s_get_player_id(Msg, TrUserData) ->
    e_msg_s_get_player_id(Msg, <<>>, TrUserData).


e_msg_s_get_player_id(#s_get_player_id{player_id = F1},
		      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_c_follow_card(Msg, TrUserData) ->
    e_msg_c_follow_card(Msg, <<>>, TrUserData).


e_msg_c_follow_card(#c_follow_card{cardID = F1}, Bin,
		    TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_s_pick_speaker(Msg, TrUserData) ->
    e_msg_s_pick_speaker(Msg, <<>>, TrUserData).


e_msg_s_pick_speaker(#s_pick_speaker{pos = F1,
				     player_id = F2},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>)
    end.

e_msg_p_card_vote(Msg, TrUserData) ->
    e_msg_p_card_vote(Msg, <<>>, TrUserData).


e_msg_p_card_vote(#p_card_vote{cardID = F1, vote = F2},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_c_pick_card(Msg, TrUserData) ->
    e_msg_c_pick_card(Msg, <<>>, TrUserData).


e_msg_c_pick_card(#c_pick_card{cardID = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_s_heart(Msg, TrUserData) ->
    e_msg_s_heart(Msg, <<>>, TrUserData).


e_msg_s_heart(#s_heart{timestamp = F1}, Bin,
	      TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_c_rank_info(Msg, TrUserData) ->
    e_msg_c_rank_info(Msg, <<>>, TrUserData).


e_msg_c_rank_info(#c_rank_info{tag = F1, rank = F2},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_s_pick_card(_Msg, _TrUserData) -> <<>>.

e_msg_s_rank_info(Msg, TrUserData) ->
    e_msg_s_rank_info(Msg, <<>>, TrUserData).


e_msg_s_rank_info(#s_rank_info{tag = F1, rank_self = F2,
			       rank_info = F3},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_mfield_s_rank_info_rank_self(TrF2, <<B1/binary, 18>>,
					  TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true ->
	     e_field_s_rank_info_rank_info(TrF3, B2, TrUserData)
      end
    end.

e_msg_s_player_info(Msg, TrUserData) ->
    e_msg_s_player_info(Msg, <<>>, TrUserData).


e_msg_s_player_info(#s_player_info{gold = F1,
				   score = F2},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_p_room(Msg, TrUserData) ->
    e_msg_p_room(Msg, <<>>, TrUserData).


e_msg_p_room(#p_room{root_id = F1, type = F2}, Bin,
	     TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_s_login(Msg, TrUserData) ->
    e_msg_s_login(Msg, <<>>, TrUserData).


e_msg_s_login(#s_login{player_id = F1}, Bin,
	      TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_s_wash_card(Msg, TrUserData) ->
    e_msg_s_wash_card(Msg, <<>>, TrUserData).


e_msg_s_wash_card(#s_wash_card{cardIDs = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_s_wash_card_cardIDs(TrF1, Bin, TrUserData)
      end
    end.

e_msg_s_battle_status(Msg, TrUserData) ->
    e_msg_s_battle_status(Msg, <<>>, TrUserData).


e_msg_s_battle_status(#s_battle_status{status = F1,
				       end_time = F2},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_c_login(Msg, TrUserData) ->
    e_msg_c_login(Msg, <<>>, TrUserData).


e_msg_c_login(#c_login{player_id = F1, name = F2,
		       head = F3, gender = F4, city = F5, province = F6,
		       country = F7},
	      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_string(TrF5, <<B4/binary, 42>>)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_string(TrF6, <<B5/binary, 50>>)
	 end,
    begin
      TrF7 = id(F7, TrUserData),
      e_type_string(TrF7, <<B6/binary, 58>>)
    end.

e_msg_s_speak_card(Msg, TrUserData) ->
    e_msg_s_speak_card(Msg, <<>>, TrUserData).


e_msg_s_speak_card(#s_speak_card{descript = F1}, Bin,
		   TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_mfield_s_battle_start_targets(Msg, Bin, TrUserData) ->
    SubBin = e_msg_p_target(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_s_battle_start_targets([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_s_battle_start_targets(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_s_battle_start_targets(Rest, Bin3, TrUserData);
e_field_s_battle_start_targets([], Bin, _TrUserData) ->
    Bin.

e_mfield_s_battle_end_score(Msg, Bin, TrUserData) ->
    SubBin = e_msg_p_score(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_s_battle_end_score([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_s_battle_end_score(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_s_battle_end_score(Rest, Bin3, TrUserData);
e_field_s_battle_end_score([], Bin, _TrUserData) -> Bin.

e_field_s_show_card_cardIDs([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2),
    e_field_s_show_card_cardIDs(Rest, Bin3, TrUserData);
e_field_s_show_card_cardIDs([], Bin, _TrUserData) ->
    Bin.

e_mfield_s_single_game_end_score(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_p_score(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_s_single_game_end_score([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_s_single_game_end_score(id(Elem,
					       TrUserData),
					    Bin2, TrUserData),
    e_field_s_single_game_end_score(Rest, Bin3, TrUserData);
e_field_s_single_game_end_score([], Bin, _TrUserData) ->
    Bin.

e_mfield_s_rank_info_rank_self(Msg, Bin, TrUserData) ->
    SubBin = e_msg_p_rank(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_s_rank_info_rank_info(Msg, Bin, TrUserData) ->
    SubBin = e_msg_p_rank(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_s_rank_info_rank_info([Elem | Rest], Bin,
			      TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_s_rank_info_rank_info(id(Elem,
					     TrUserData),
					  Bin2, TrUserData),
    e_field_s_rank_info_rank_info(Rest, Bin3, TrUserData);
e_field_s_rank_info_rank_info([], Bin, _TrUserData) ->
    Bin.

e_field_s_wash_card_cardIDs([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2),
    e_field_s_wash_card_cardIDs(Rest, Bin3, TrUserData);
e_field_s_wash_card_cardIDs([], Bin, _TrUserData) ->
    Bin.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
-ifdef('GPB_FUNCTION_STACK').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

-endif.

decode_msg_2_doit(p_target, Bin, TrUserData) ->
    d_msg_p_target(Bin, TrUserData);
decode_msg_2_doit(s_battle_start, Bin, TrUserData) ->
    d_msg_s_battle_start(Bin, TrUserData);
decode_msg_2_doit(c_player_info, Bin, TrUserData) ->
    d_msg_c_player_info(Bin, TrUserData);
decode_msg_2_doit(p_score, Bin, TrUserData) ->
    d_msg_p_score(Bin, TrUserData);
decode_msg_2_doit(s_battle_end, Bin, TrUserData) ->
    d_msg_s_battle_end(Bin, TrUserData);
decode_msg_2_doit(c_get_player_id, Bin, TrUserData) ->
    d_msg_c_get_player_id(Bin, TrUserData);
decode_msg_2_doit(p_rank, Bin, TrUserData) ->
    d_msg_p_rank(Bin, TrUserData);
decode_msg_2_doit(s_cancel_match, Bin, TrUserData) ->
    d_msg_s_cancel_match(Bin, TrUserData);
decode_msg_2_doit(s_follow_card, Bin, TrUserData) ->
    d_msg_s_follow_card(Bin, TrUserData);
decode_msg_2_doit(c_start_match, Bin, TrUserData) ->
    d_msg_c_start_match(Bin, TrUserData);
decode_msg_2_doit(c_heart, Bin, TrUserData) ->
    d_msg_c_heart(Bin, TrUserData);
decode_msg_2_doit(s_show_card, Bin, TrUserData) ->
    d_msg_s_show_card(Bin, TrUserData);
decode_msg_2_doit(s_vote_card, Bin, TrUserData) ->
    d_msg_s_vote_card(Bin, TrUserData);
decode_msg_2_doit(s_single_game_end, Bin, TrUserData) ->
    d_msg_s_single_game_end(Bin, TrUserData);
decode_msg_2_doit(c_speak_card, Bin, TrUserData) ->
    d_msg_c_speak_card(Bin, TrUserData);
decode_msg_2_doit(c_vote_card, Bin, TrUserData) ->
    d_msg_c_vote_card(Bin, TrUserData);
decode_msg_2_doit(s_get_player_id, Bin, TrUserData) ->
    d_msg_s_get_player_id(Bin, TrUserData);
decode_msg_2_doit(c_follow_card, Bin, TrUserData) ->
    d_msg_c_follow_card(Bin, TrUserData);
decode_msg_2_doit(s_pick_speaker, Bin, TrUserData) ->
    d_msg_s_pick_speaker(Bin, TrUserData);
decode_msg_2_doit(p_card_vote, Bin, TrUserData) ->
    d_msg_p_card_vote(Bin, TrUserData);
decode_msg_2_doit(c_pick_card, Bin, TrUserData) ->
    d_msg_c_pick_card(Bin, TrUserData);
decode_msg_2_doit(s_heart, Bin, TrUserData) ->
    d_msg_s_heart(Bin, TrUserData);
decode_msg_2_doit(c_rank_info, Bin, TrUserData) ->
    d_msg_c_rank_info(Bin, TrUserData);
decode_msg_2_doit(s_pick_card, Bin, TrUserData) ->
    d_msg_s_pick_card(Bin, TrUserData);
decode_msg_2_doit(s_rank_info, Bin, TrUserData) ->
    d_msg_s_rank_info(Bin, TrUserData);
decode_msg_2_doit(s_player_info, Bin, TrUserData) ->
    d_msg_s_player_info(Bin, TrUserData);
decode_msg_2_doit(p_room, Bin, TrUserData) ->
    d_msg_p_room(Bin, TrUserData);
decode_msg_2_doit(s_login, Bin, TrUserData) ->
    d_msg_s_login(Bin, TrUserData);
decode_msg_2_doit(s_wash_card, Bin, TrUserData) ->
    d_msg_s_wash_card(Bin, TrUserData);
decode_msg_2_doit(s_battle_status, Bin, TrUserData) ->
    d_msg_s_battle_status(Bin, TrUserData);
decode_msg_2_doit(c_login, Bin, TrUserData) ->
    d_msg_c_login(Bin, TrUserData);
decode_msg_2_doit(s_speak_card, Bin, TrUserData) ->
    d_msg_s_speak_card(Bin, TrUserData).



d_msg_p_target(Bin, TrUserData) ->
    dfp_read_field_def_p_target(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_target(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_target_pos(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_p_target(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_target_target_id(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_target(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_target_target_name(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_target(<<34, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_target_target_head(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_target(<<42, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_target_target_gender(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_target(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, _) ->
    #p_target{pos = F@_1, target_id = F@_2,
	      target_name = F@_3, target_head = F@_4,
	      target_gender = F@_5};
dfp_read_field_def_p_target(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_p_target(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_p_target(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_target(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_p_target(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_target_pos(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      18 ->
	  d_field_p_target_target_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      26 ->
	  d_field_p_target_target_name(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      34 ->
	  d_field_p_target_target_head(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      42 ->
	  d_field_p_target_target_gender(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_target(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
	    1 ->
		skip_64_p_target(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData);
	    2 ->
		skip_length_delimited_p_target(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_p_target(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_p_target(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData)
	  end
    end;
dg_read_field_def_p_target(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, _) ->
    #p_target{pos = F@_1, target_id = F@_2,
	      target_name = F@_3, target_head = F@_4,
	      target_gender = F@_5}.

d_field_p_target_pos(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_target_pos(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_target_pos(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_p_target(RestF, 0, 0, NewFValue,
				F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_p_target_target_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_target_target_id(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_target_target_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_p_target(RestF, 0, 0, F@_1,
				NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_p_target_target_name(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_target_target_name(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_target_target_name(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_p_target(RestF, 0, 0, F@_1, F@_2,
				NewFValue, F@_4, F@_5, TrUserData).

d_field_p_target_target_head(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_target_target_head(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_target_target_head(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_p_target(RestF, 0, 0, F@_1, F@_2,
				F@_3, NewFValue, F@_5, TrUserData).

d_field_p_target_target_gender(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_target_target_gender(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
d_field_p_target_target_gender(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_p_target(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, NewFValue, TrUserData).

skip_varint_p_target(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_p_target(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
skip_varint_p_target(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_target(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_p_target(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_target(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
skip_length_delimited_p_target(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_target(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_group_p_target(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_target(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_32_p_target(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_target(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_64_p_target(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_target(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

d_msg_s_battle_start(Bin, TrUserData) ->
    dfp_read_field_def_s_battle_start(Bin, 0, 0,
				      id([], TrUserData), TrUserData).

dfp_read_field_def_s_battle_start(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_s_battle_start_targets(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_s_battle_start(<<>>, 0, 0, R1,
				  TrUserData) ->
    #s_battle_start{targets =
			lists_reverse(R1, TrUserData)};
dfp_read_field_def_s_battle_start(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_s_battle_start(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_s_battle_start(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_battle_start(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_s_battle_start(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_s_battle_start_targets(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_battle_start(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_s_battle_start(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_s_battle_start(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_s_battle_start(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_s_battle_start(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_s_battle_start(<<>>, 0, 0, R1,
				 TrUserData) ->
    #s_battle_start{targets =
			lists_reverse(R1, TrUserData)}.

d_field_s_battle_start_targets(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_s_battle_start_targets(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_s_battle_start_targets(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_p_target(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_s_battle_start(RestF, 0, 0,
				      cons(NewFValue, Prev, TrUserData),
				      TrUserData).

skip_varint_s_battle_start(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_s_battle_start(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_s_battle_start(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_s_battle_start(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_s_battle_start(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_battle_start(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_s_battle_start(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_battle_start(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_s_battle_start(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_battle_start(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_s_battle_start(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_s_battle_start(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_s_battle_start(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_s_battle_start(Rest, Z1, Z2, F@_1,
				      TrUserData).

d_msg_c_player_info(Bin, TrUserData) ->
    dfp_read_field_def_c_player_info(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_c_player_info(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, TrUserData) ->
    d_field_c_player_info_gold(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_c_player_info(<<16, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_c_player_info_score(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_c_player_info(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #c_player_info{gold = F@_1, score = F@_2};
dfp_read_field_def_c_player_info(Other, Z1, Z2, F@_1,
				 F@_2, TrUserData) ->
    dg_read_field_def_c_player_info(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData).

dg_read_field_def_c_player_info(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_player_info(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_c_player_info(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_c_player_info_gold(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      16 ->
	  d_field_c_player_info_score(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_player_info(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    1 ->
		skip_64_c_player_info(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    2 ->
		skip_length_delimited_c_player_info(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    3 ->
		skip_group_c_player_info(Rest, Key bsr 3, 0, F@_1, F@_2,
					 TrUserData);
	    5 ->
		skip_32_c_player_info(Rest, 0, 0, F@_1, F@_2,
				      TrUserData)
	  end
    end;
dg_read_field_def_c_player_info(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #c_player_info{gold = F@_1, score = F@_2}.

d_field_c_player_info_gold(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_c_player_info_gold(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_c_player_info_gold(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_c_player_info(RestF, 0, 0, NewFValue,
				     F@_2, TrUserData).

d_field_c_player_info_score(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_c_player_info_score(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_c_player_info_score(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_c_player_info(RestF, 0, 0, F@_1,
				     NewFValue, TrUserData).

skip_varint_c_player_info(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_c_player_info(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
skip_varint_c_player_info(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_c_player_info(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_length_delimited_c_player_info(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_player_info(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_c_player_info(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_player_info(Rest2, 0, 0, F@_1,
				     F@_2, TrUserData).

skip_group_c_player_info(Bin, FNum, Z2, F@_1, F@_2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_player_info(Rest, 0, Z2, F@_1,
				     F@_2, TrUserData).

skip_32_c_player_info(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_c_player_info(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_64_c_player_info(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_c_player_info(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

d_msg_p_score(Bin, TrUserData) ->
    dfp_read_field_def_p_score(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_score(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_score_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
dfp_read_field_def_p_score(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_score_player_id(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_p_score(<<24, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_score_score(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_p_score(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #p_score{id = F@_1, player_id = F@_2, score = F@_3};
dfp_read_field_def_p_score(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, TrUserData) ->
    dg_read_field_def_p_score(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

dg_read_field_def_p_score(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_score(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_p_score(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_score_id(Rest, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData);
      18 ->
	  d_field_p_score_player_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      24 ->
	  d_field_p_score_score(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_score(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    1 ->
		skip_64_p_score(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    2 ->
		skip_length_delimited_p_score(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    3 ->
		skip_group_p_score(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    5 ->
		skip_32_p_score(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData)
	  end
    end;
dg_read_field_def_p_score(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  _) ->
    #p_score{id = F@_1, player_id = F@_2, score = F@_3}.

d_field_p_score_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_score_id(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, TrUserData);
d_field_p_score_id(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_p_score(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, TrUserData).

d_field_p_score_player_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_score_player_id(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_p_score_player_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_p_score(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, TrUserData).

d_field_p_score_score(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_score_score(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_p_score_score(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_p_score(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, TrUserData).

skip_varint_p_score(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_p_score(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
skip_varint_p_score(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_score(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_length_delimited_p_score(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_score(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_p_score(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_score(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, TrUserData).

skip_group_p_score(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_score(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_32_p_score(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_score(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_64_p_score(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_score(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

d_msg_s_battle_end(Bin, TrUserData) ->
    dfp_read_field_def_s_battle_end(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id([], TrUserData), TrUserData).

dfp_read_field_def_s_battle_end(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_s_battle_end_mvp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_s_battle_end(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_s_battle_end_higher(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_s_battle_end(<<26, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_s_battle_end_score(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_s_battle_end(<<>>, 0, 0, F@_1, F@_2,
				R1, TrUserData) ->
    #s_battle_end{mvp = F@_1, higher = F@_2,
		  score = lists_reverse(R1, TrUserData)};
dfp_read_field_def_s_battle_end(Other, Z1, Z2, F@_1,
				F@_2, F@_3, TrUserData) ->
    dg_read_field_def_s_battle_end(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, TrUserData).

dg_read_field_def_s_battle_end(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_battle_end(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_s_battle_end(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_s_battle_end_mvp(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      18 ->
	  d_field_s_battle_end_higher(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      26 ->
	  d_field_s_battle_end_score(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_battle_end(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData);
	    1 ->
		skip_64_s_battle_end(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    2 ->
		skip_length_delimited_s_battle_end(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_s_battle_end(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, TrUserData);
	    5 ->
		skip_32_s_battle_end(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData)
	  end
    end;
dg_read_field_def_s_battle_end(<<>>, 0, 0, F@_1, F@_2,
			       R1, TrUserData) ->
    #s_battle_end{mvp = F@_1, higher = F@_2,
		  score = lists_reverse(R1, TrUserData)}.

d_field_s_battle_end_mvp(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_s_battle_end_mvp(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_s_battle_end_mvp(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_s_battle_end(RestF, 0, 0, NewFValue,
				    F@_2, F@_3, TrUserData).

d_field_s_battle_end_higher(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_s_battle_end_higher(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_s_battle_end_higher(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_s_battle_end(RestF, 0, 0, F@_1,
				    NewFValue, F@_3, TrUserData).

d_field_s_battle_end_score(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_s_battle_end_score(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_s_battle_end_score(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_p_score(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_s_battle_end(RestF, 0, 0, F@_1, F@_2,
				    cons(NewFValue, Prev, TrUserData),
				    TrUserData).

skip_varint_s_battle_end(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_s_battle_end(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
skip_varint_s_battle_end(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_s_battle_end(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_length_delimited_s_battle_end(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_battle_end(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
skip_length_delimited_s_battle_end(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_battle_end(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, TrUserData).

skip_group_s_battle_end(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_battle_end(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, TrUserData).

skip_32_s_battle_end(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_s_battle_end(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_64_s_battle_end(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_s_battle_end(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

d_msg_c_get_player_id(Bin, TrUserData) ->
    dfp_read_field_def_c_get_player_id(Bin, 0, 0,
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_c_get_player_id(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_c_get_player_id_code(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_c_get_player_id(<<>>, 0, 0, F@_1,
				   _) ->
    #c_get_player_id{code = F@_1};
dfp_read_field_def_c_get_player_id(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_c_get_player_id(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_c_get_player_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_get_player_id(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_c_get_player_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_c_get_player_id_code(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_get_player_id(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_c_get_player_id(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_c_get_player_id(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_c_get_player_id(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_c_get_player_id(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_c_get_player_id(<<>>, 0, 0, F@_1,
				  _) ->
    #c_get_player_id{code = F@_1}.

d_field_c_get_player_id_code(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_c_get_player_id_code(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_c_get_player_id_code(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_get_player_id(RestF, 0, 0,
				       NewFValue, TrUserData).

skip_varint_c_get_player_id(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_c_get_player_id(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_c_get_player_id(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_c_get_player_id(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_c_get_player_id(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_get_player_id(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_c_get_player_id(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_get_player_id(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_c_get_player_id(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_get_player_id(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_c_get_player_id(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_c_get_player_id(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_c_get_player_id(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_c_get_player_id(Rest, Z1, Z2, F@_1,
				       TrUserData).

d_msg_p_rank(Bin, TrUserData) ->
    dfp_read_field_def_p_rank(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_rank(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_rank_key(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_rank(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_rank_value(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_rank(<<24, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_rank_rank(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_rank(<<32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_rank_title(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_rank(<<42, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_rank_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_rank(<<50, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_rank_head(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_rank(<<58, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_rank_gender(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_rank(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, _) ->
    #p_rank{key = F@_1, value = F@_2, rank = F@_3,
	    title = F@_4, name = F@_5, head = F@_6, gender = F@_7};
dfp_read_field_def_p_rank(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dg_read_field_def_p_rank(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_p_rank(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_rank(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData);
dg_read_field_def_p_rank(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_p_rank_key(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, TrUserData);
      16 ->
	  d_field_p_rank_value(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      24 ->
	  d_field_p_rank_rank(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      32 ->
	  d_field_p_rank_title(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      42 ->
	  d_field_p_rank_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      50 ->
	  d_field_p_rank_head(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      58 ->
	  d_field_p_rank_gender(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_rank(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_p_rank(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_p_rank(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6, F@_7,
					     TrUserData);
	    3 ->
		skip_group_p_rank(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_p_rank(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_p_rank(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, _) ->
    #p_rank{key = F@_1, value = F@_2, rank = F@_3,
	    title = F@_4, name = F@_5, head = F@_6, gender = F@_7}.

d_field_p_rank_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_rank_key(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_rank_key(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_p_rank(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_p_rank_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_rank_value(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_rank_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_p_rank(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_p_rank_rank(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_rank_rank(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_rank_rank(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_p_rank(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_p_rank_title(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_rank_title(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_rank_title(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_p_rank(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_p_rank_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_rank_name(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_rank_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_p_rank(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_p_rank_head(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_rank_head(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_rank_head(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_p_rank(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_p_rank_gender(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_rank_gender(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_rank_gender(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_p_rank(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_p_rank(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    skip_varint_p_rank(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, TrUserData);
skip_varint_p_rank(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_p_rank(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_p_rank(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData)
    when N < 57 ->
    skip_length_delimited_p_rank(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData);
skip_length_delimited_p_rank(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_rank(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_p_rank(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_rank(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_p_rank(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_p_rank(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_p_rank(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_p_rank(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_msg_s_cancel_match(Bin, TrUserData) ->
    dfp_read_field_def_s_cancel_match(Bin, 0, 0,
				      TrUserData).

dfp_read_field_def_s_cancel_match(<<>>, 0, 0, _) ->
    #s_cancel_match{};
dfp_read_field_def_s_cancel_match(Other, Z1, Z2,
				  TrUserData) ->
    dg_read_field_def_s_cancel_match(Other, Z1, Z2,
				     TrUserData).

dg_read_field_def_s_cancel_match(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_cancel_match(Rest, N + 7,
				     X bsl N + Acc, TrUserData);
dg_read_field_def_s_cancel_match(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_s_cancel_match(Rest, 0, 0, TrUserData);
      1 -> skip_64_s_cancel_match(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_s_cancel_match(Rest, 0, 0,
					       TrUserData);
      3 ->
	  skip_group_s_cancel_match(Rest, Key bsr 3, 0,
				    TrUserData);
      5 -> skip_32_s_cancel_match(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_s_cancel_match(<<>>, 0, 0, _) ->
    #s_cancel_match{}.

skip_varint_s_cancel_match(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, TrUserData) ->
    skip_varint_s_cancel_match(Rest, Z1, Z2, TrUserData);
skip_varint_s_cancel_match(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, TrUserData) ->
    dfp_read_field_def_s_cancel_match(Rest, Z1, Z2,
				      TrUserData).

skip_length_delimited_s_cancel_match(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_cancel_match(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
skip_length_delimited_s_cancel_match(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_cancel_match(Rest2, 0, 0,
				      TrUserData).

skip_group_s_cancel_match(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_cancel_match(Rest, 0, Z2,
				      TrUserData).

skip_32_s_cancel_match(<<_:32, Rest/binary>>, Z1, Z2,
		       TrUserData) ->
    dfp_read_field_def_s_cancel_match(Rest, Z1, Z2,
				      TrUserData).

skip_64_s_cancel_match(<<_:64, Rest/binary>>, Z1, Z2,
		       TrUserData) ->
    dfp_read_field_def_s_cancel_match(Rest, Z1, Z2,
				      TrUserData).

d_msg_s_follow_card(Bin, TrUserData) ->
    dfp_read_field_def_s_follow_card(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_follow_card(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_follow_card_pos(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_s_follow_card(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_follow_card_player_id(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_s_follow_card(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #s_follow_card{pos = F@_1, player_id = F@_2};
dfp_read_field_def_s_follow_card(Other, Z1, Z2, F@_1,
				 F@_2, TrUserData) ->
    dg_read_field_def_s_follow_card(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData).

dg_read_field_def_s_follow_card(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_follow_card(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_s_follow_card(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_follow_card_pos(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      18 ->
	  d_field_s_follow_card_player_id(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_follow_card(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    1 ->
		skip_64_s_follow_card(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    2 ->
		skip_length_delimited_s_follow_card(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    3 ->
		skip_group_s_follow_card(Rest, Key bsr 3, 0, F@_1, F@_2,
					 TrUserData);
	    5 ->
		skip_32_s_follow_card(Rest, 0, 0, F@_1, F@_2,
				      TrUserData)
	  end
    end;
dg_read_field_def_s_follow_card(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #s_follow_card{pos = F@_1, player_id = F@_2}.

d_field_s_follow_card_pos(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_follow_card_pos(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_s_follow_card_pos(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_follow_card(RestF, 0, 0, NewFValue,
				     F@_2, TrUserData).

d_field_s_follow_card_player_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_follow_card_player_id(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_s_follow_card_player_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_s_follow_card(RestF, 0, 0, F@_1,
				     NewFValue, TrUserData).

skip_varint_s_follow_card(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_s_follow_card(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
skip_varint_s_follow_card(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_follow_card(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_length_delimited_s_follow_card(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_follow_card(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_s_follow_card(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_follow_card(Rest2, 0, 0, F@_1,
				     F@_2, TrUserData).

skip_group_s_follow_card(Bin, FNum, Z2, F@_1, F@_2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_follow_card(Rest, 0, Z2, F@_1,
				     F@_2, TrUserData).

skip_32_s_follow_card(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_follow_card(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_64_s_follow_card(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_follow_card(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

d_msg_c_start_match(Bin, TrUserData) ->
    dfp_read_field_def_c_start_match(Bin, 0, 0,
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_c_start_match(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, TrUserData) ->
    d_field_c_start_match_type(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_c_start_match(<<>>, 0, 0, F@_1, _) ->
    #c_start_match{type = F@_1};
dfp_read_field_def_c_start_match(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_c_start_match(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_c_start_match(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_start_match(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_c_start_match(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_c_start_match_type(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_start_match(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_c_start_match(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_c_start_match(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_c_start_match(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_c_start_match(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_c_start_match(<<>>, 0, 0, F@_1, _) ->
    #c_start_match{type = F@_1}.

d_field_c_start_match_type(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_c_start_match_type(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_c_start_match_type(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_c_start_match(RestF, 0, 0, NewFValue,
				     TrUserData).

skip_varint_c_start_match(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_c_start_match(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_c_start_match(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_c_start_match(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_c_start_match(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_start_match(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_c_start_match(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_start_match(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_c_start_match(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_start_match(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_c_start_match(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_c_start_match(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_c_start_match(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_c_start_match(Rest, Z1, Z2, F@_1,
				     TrUserData).

d_msg_c_heart(Bin, TrUserData) ->
    dfp_read_field_def_c_heart(Bin, 0, 0, TrUserData).

dfp_read_field_def_c_heart(<<>>, 0, 0, _) -> #c_heart{};
dfp_read_field_def_c_heart(Other, Z1, Z2, TrUserData) ->
    dg_read_field_def_c_heart(Other, Z1, Z2, TrUserData).

dg_read_field_def_c_heart(<<1:1, X:7, Rest/binary>>, N,
			  Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_heart(Rest, N + 7, X bsl N + Acc,
			      TrUserData);
dg_read_field_def_c_heart(<<0:1, X:7, Rest/binary>>, N,
			  Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_c_heart(Rest, 0, 0, TrUserData);
      1 -> skip_64_c_heart(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_c_heart(Rest, 0, 0, TrUserData);
      3 -> skip_group_c_heart(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_c_heart(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_c_heart(<<>>, 0, 0, _) -> #c_heart{}.

skip_varint_c_heart(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    skip_varint_c_heart(Rest, Z1, Z2, TrUserData);
skip_varint_c_heart(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_c_heart(Rest, Z1, Z2, TrUserData).

skip_length_delimited_c_heart(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_heart(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
skip_length_delimited_c_heart(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_heart(Rest2, 0, 0, TrUserData).

skip_group_c_heart(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_heart(Rest, 0, Z2, TrUserData).

skip_32_c_heart(<<_:32, Rest/binary>>, Z1, Z2,
		TrUserData) ->
    dfp_read_field_def_c_heart(Rest, Z1, Z2, TrUserData).

skip_64_c_heart(<<_:64, Rest/binary>>, Z1, Z2,
		TrUserData) ->
    dfp_read_field_def_c_heart(Rest, Z1, Z2, TrUserData).

d_msg_s_show_card(Bin, TrUserData) ->
    dfp_read_field_def_s_show_card(Bin, 0, 0,
				   id([], TrUserData), TrUserData).

dfp_read_field_def_s_show_card(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_pfield_s_show_card_cardIDs(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_s_show_card(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_s_show_card_cardIDs(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_s_show_card(<<>>, 0, 0, R1,
			       TrUserData) ->
    #s_show_card{cardIDs = lists_reverse(R1, TrUserData)};
dfp_read_field_def_s_show_card(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_s_show_card(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_s_show_card(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_show_card(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_s_show_card(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_s_show_card_cardIDs(Rest, 0, 0, F@_1,
				       TrUserData);
      8 ->
	  d_field_s_show_card_cardIDs(Rest, 0, 0, F@_1,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_show_card(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_s_show_card(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_s_show_card(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_s_show_card(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_s_show_card(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_s_show_card(<<>>, 0, 0, R1,
			      TrUserData) ->
    #s_show_card{cardIDs = lists_reverse(R1, TrUserData)}.

d_field_s_show_card_cardIDs(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_s_show_card_cardIDs(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_s_show_card_cardIDs(<<0:1, X:7, Rest/binary>>,
			    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_show_card(RestF, 0, 0,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

d_pfield_s_show_card_cardIDs(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_pfield_s_show_card_cardIDs(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_pfield_s_show_card_cardIDs(<<0:1, X:7, Rest/binary>>,
			     N, Acc, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_s_show_card_cardIDs(PackedBytes,
						0, 0, E),
    dfp_read_field_def_s_show_card(Rest2, 0, 0, NewSeq,
				   TrUserData).

d_packed_field_s_show_card_cardIDs(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, AccSeq)
    when N < 57 ->
    d_packed_field_s_show_card_cardIDs(Rest, N + 7,
				       X bsl N + Acc, AccSeq);
d_packed_field_s_show_card_cardIDs(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, AccSeq) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    d_packed_field_s_show_card_cardIDs(RestF, 0, 0,
				       [NewFValue | AccSeq]);
d_packed_field_s_show_card_cardIDs(<<>>, 0, 0,
				   AccSeq) ->
    AccSeq.

skip_varint_s_show_card(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_s_show_card(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_s_show_card(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_s_show_card(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_s_show_card(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_show_card(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_s_show_card(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_show_card(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_s_show_card(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_show_card(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_s_show_card(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_s_show_card(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_s_show_card(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_s_show_card(Rest, Z1, Z2, F@_1,
				   TrUserData).

d_msg_s_vote_card(Bin, TrUserData) ->
    dfp_read_field_def_s_vote_card(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_vote_card(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_s_vote_card_pos(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_s_vote_card(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_s_vote_card_player_id(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_s_vote_card(<<24, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_s_vote_card_cardID(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_s_vote_card(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, _) ->
    #s_vote_card{pos = F@_1, player_id = F@_2,
		 cardID = F@_3};
dfp_read_field_def_s_vote_card(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, TrUserData) ->
    dg_read_field_def_s_vote_card(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

dg_read_field_def_s_vote_card(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_vote_card(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_s_vote_card(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_vote_card_pos(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      18 ->
	  d_field_s_vote_card_player_id(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      24 ->
	  d_field_s_vote_card_cardID(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_vote_card(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData);
	    1 ->
		skip_64_s_vote_card(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    2 ->
		skip_length_delimited_s_vote_card(Rest, 0, 0, F@_1,
						  F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_s_vote_card(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, TrUserData);
	    5 ->
		skip_32_s_vote_card(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData)
	  end
    end;
dg_read_field_def_s_vote_card(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, _) ->
    #s_vote_card{pos = F@_1, player_id = F@_2,
		 cardID = F@_3}.

d_field_s_vote_card_pos(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_s_vote_card_pos(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_s_vote_card_pos(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_vote_card(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, TrUserData).

d_field_s_vote_card_player_id(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_s_vote_card_player_id(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_s_vote_card_player_id(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_s_vote_card(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, TrUserData).

d_field_s_vote_card_cardID(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_s_vote_card_cardID(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_s_vote_card_cardID(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_vote_card(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, TrUserData).

skip_varint_s_vote_card(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_s_vote_card(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
skip_varint_s_vote_card(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_s_vote_card(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_length_delimited_s_vote_card(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_vote_card(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
skip_length_delimited_s_vote_card(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_vote_card(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, TrUserData).

skip_group_s_vote_card(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_vote_card(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_32_s_vote_card(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_s_vote_card(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_64_s_vote_card(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_s_vote_card(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

d_msg_s_single_game_end(Bin, TrUserData) ->
    dfp_read_field_def_s_single_game_end(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id([], TrUserData), TrUserData).

dfp_read_field_def_s_single_game_end(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_single_game_end_cardID(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_s_single_game_end(<<18,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_single_game_end_score(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_s_single_game_end(<<>>, 0, 0, F@_1,
				     R1, TrUserData) ->
    #s_single_game_end{cardID = F@_1,
		       score = lists_reverse(R1, TrUserData)};
dfp_read_field_def_s_single_game_end(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_s_single_game_end(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

dg_read_field_def_s_single_game_end(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_single_game_end(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_s_single_game_end(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_single_game_end_cardID(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      18 ->
	  d_field_s_single_game_end_score(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_single_game_end(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		skip_64_s_single_game_end(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		skip_length_delimited_s_single_game_end(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		skip_group_s_single_game_end(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		skip_32_s_single_game_end(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
dg_read_field_def_s_single_game_end(<<>>, 0, 0, F@_1,
				    R1, TrUserData) ->
    #s_single_game_end{cardID = F@_1,
		       score = lists_reverse(R1, TrUserData)}.

d_field_s_single_game_end_cardID(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_single_game_end_cardID(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_s_single_game_end_cardID(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_single_game_end(RestF, 0, 0,
					 NewFValue, F@_2, TrUserData).

d_field_s_single_game_end_score(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_single_game_end_score(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_s_single_game_end_score(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_p_score(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_s_single_game_end(RestF, 0, 0, F@_1,
					 cons(NewFValue, Prev, TrUserData),
					 TrUserData).

skip_varint_s_single_game_end(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_s_single_game_end(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
skip_varint_s_single_game_end(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_single_game_end(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_length_delimited_s_single_game_end(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_single_game_end(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
skip_length_delimited_s_single_game_end(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_single_game_end(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

skip_group_s_single_game_end(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_single_game_end(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

skip_32_s_single_game_end(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_single_game_end(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_64_s_single_game_end(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_single_game_end(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

d_msg_c_speak_card(Bin, TrUserData) ->
    dfp_read_field_def_c_speak_card(Bin, 0, 0,
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_c_speak_card(<<10, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_c_speak_card_descript(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_c_speak_card(<<>>, 0, 0, F@_1, _) ->
    #c_speak_card{descript = F@_1};
dfp_read_field_def_c_speak_card(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_c_speak_card(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_c_speak_card(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_speak_card(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_c_speak_card(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_c_speak_card_descript(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_speak_card(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_c_speak_card(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_c_speak_card(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_c_speak_card(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_c_speak_card(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_c_speak_card(<<>>, 0, 0, F@_1, _) ->
    #c_speak_card{descript = F@_1}.

d_field_c_speak_card_descript(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_c_speak_card_descript(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_c_speak_card_descript(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_speak_card(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_c_speak_card(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_c_speak_card(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_c_speak_card(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_c_speak_card(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_c_speak_card(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_speak_card(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_c_speak_card(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_speak_card(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_c_speak_card(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_speak_card(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_c_speak_card(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_c_speak_card(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_c_speak_card(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_c_speak_card(Rest, Z1, Z2, F@_1,
				    TrUserData).

d_msg_c_vote_card(Bin, TrUserData) ->
    dfp_read_field_def_c_vote_card(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_c_vote_card(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_c_vote_card_cardID(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_c_vote_card(<<>>, 0, 0, F@_1, _) ->
    #c_vote_card{cardID = F@_1};
dfp_read_field_def_c_vote_card(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_c_vote_card(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_c_vote_card(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_vote_card(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_c_vote_card(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_c_vote_card_cardID(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_vote_card(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_c_vote_card(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_c_vote_card(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_c_vote_card(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_c_vote_card(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_c_vote_card(<<>>, 0, 0, F@_1, _) ->
    #c_vote_card{cardID = F@_1}.

d_field_c_vote_card_cardID(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_c_vote_card_cardID(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_c_vote_card_cardID(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_c_vote_card(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_c_vote_card(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_c_vote_card(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_c_vote_card(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_c_vote_card(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_c_vote_card(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_vote_card(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_c_vote_card(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_vote_card(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_c_vote_card(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_vote_card(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_c_vote_card(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_c_vote_card(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_c_vote_card(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_c_vote_card(Rest, Z1, Z2, F@_1,
				   TrUserData).

d_msg_s_get_player_id(Bin, TrUserData) ->
    dfp_read_field_def_s_get_player_id(Bin, 0, 0,
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_get_player_id(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_s_get_player_id_player_id(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_s_get_player_id(<<>>, 0, 0, F@_1,
				   _) ->
    #s_get_player_id{player_id = F@_1};
dfp_read_field_def_s_get_player_id(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_s_get_player_id(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_s_get_player_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_get_player_id(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_s_get_player_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_s_get_player_id_player_id(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_get_player_id(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_s_get_player_id(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_s_get_player_id(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_s_get_player_id(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_s_get_player_id(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_s_get_player_id(<<>>, 0, 0, F@_1,
				  _) ->
    #s_get_player_id{player_id = F@_1}.

d_field_s_get_player_id_player_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_s_get_player_id_player_id(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_s_get_player_id_player_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_s_get_player_id(RestF, 0, 0,
				       NewFValue, TrUserData).

skip_varint_s_get_player_id(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_s_get_player_id(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_s_get_player_id(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_s_get_player_id(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_s_get_player_id(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_get_player_id(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_s_get_player_id(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_get_player_id(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_s_get_player_id(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_get_player_id(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_s_get_player_id(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_s_get_player_id(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_s_get_player_id(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_s_get_player_id(Rest, Z1, Z2, F@_1,
				       TrUserData).

d_msg_c_follow_card(Bin, TrUserData) ->
    dfp_read_field_def_c_follow_card(Bin, 0, 0,
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_c_follow_card(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, TrUserData) ->
    d_field_c_follow_card_cardID(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_c_follow_card(<<>>, 0, 0, F@_1, _) ->
    #c_follow_card{cardID = F@_1};
dfp_read_field_def_c_follow_card(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_c_follow_card(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_c_follow_card(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_follow_card(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_c_follow_card(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_c_follow_card_cardID(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_follow_card(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_c_follow_card(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_c_follow_card(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_c_follow_card(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_c_follow_card(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_c_follow_card(<<>>, 0, 0, F@_1, _) ->
    #c_follow_card{cardID = F@_1}.

d_field_c_follow_card_cardID(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_c_follow_card_cardID(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_c_follow_card_cardID(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_c_follow_card(RestF, 0, 0, NewFValue,
				     TrUserData).

skip_varint_c_follow_card(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_c_follow_card(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_c_follow_card(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_c_follow_card(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_c_follow_card(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_follow_card(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_c_follow_card(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_follow_card(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_c_follow_card(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_follow_card(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_c_follow_card(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_c_follow_card(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_c_follow_card(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_c_follow_card(Rest, Z1, Z2, F@_1,
				     TrUserData).

d_msg_s_pick_speaker(Bin, TrUserData) ->
    dfp_read_field_def_s_pick_speaker(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_pick_speaker(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_pick_speaker_pos(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_s_pick_speaker(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_pick_speaker_player_id(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_s_pick_speaker(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #s_pick_speaker{pos = F@_1, player_id = F@_2};
dfp_read_field_def_s_pick_speaker(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_s_pick_speaker(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_s_pick_speaker(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_pick_speaker(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_s_pick_speaker(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_pick_speaker_pos(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      18 ->
	  d_field_s_pick_speaker_player_id(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_pick_speaker(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_s_pick_speaker(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_s_pick_speaker(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_s_pick_speaker(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_s_pick_speaker(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_s_pick_speaker(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #s_pick_speaker{pos = F@_1, player_id = F@_2}.

d_field_s_pick_speaker_pos(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_pick_speaker_pos(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_s_pick_speaker_pos(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_pick_speaker(RestF, 0, 0,
				      NewFValue, F@_2, TrUserData).

d_field_s_pick_speaker_player_id(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_pick_speaker_player_id(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_s_pick_speaker_player_id(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_s_pick_speaker(RestF, 0, 0, F@_1,
				      NewFValue, TrUserData).

skip_varint_s_pick_speaker(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_s_pick_speaker(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_s_pick_speaker(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_pick_speaker(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_s_pick_speaker(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_pick_speaker(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_s_pick_speaker(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_pick_speaker(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_s_pick_speaker(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_pick_speaker(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_s_pick_speaker(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_pick_speaker(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_s_pick_speaker(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_pick_speaker(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

d_msg_p_card_vote(Bin, TrUserData) ->
    dfp_read_field_def_p_card_vote(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_card_vote(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_p_card_vote_cardID(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_p_card_vote(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_p_card_vote_vote(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_p_card_vote(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #p_card_vote{cardID = F@_1, vote = F@_2};
dfp_read_field_def_p_card_vote(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_p_card_vote(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_p_card_vote(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_card_vote(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_p_card_vote(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_card_vote_cardID(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      16 ->
	  d_field_p_card_vote_vote(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_card_vote(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_p_card_vote(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_p_card_vote(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_p_card_vote(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_p_card_vote(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_p_card_vote(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #p_card_vote{cardID = F@_1, vote = F@_2}.

d_field_p_card_vote_cardID(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_p_card_vote_cardID(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_p_card_vote_cardID(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_p_card_vote(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_p_card_vote_vote(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_p_card_vote_vote(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_p_card_vote_vote(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_p_card_vote(RestF, 0, 0, F@_1,
				   NewFValue, TrUserData).

skip_varint_p_card_vote(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_p_card_vote(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_p_card_vote(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_p_card_vote(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_p_card_vote(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_card_vote(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_p_card_vote(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_card_vote(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_p_card_vote(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_card_vote(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_p_card_vote(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_p_card_vote(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_p_card_vote(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_p_card_vote(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

d_msg_c_pick_card(Bin, TrUserData) ->
    dfp_read_field_def_c_pick_card(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_c_pick_card(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_c_pick_card_cardID(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_c_pick_card(<<>>, 0, 0, F@_1, _) ->
    #c_pick_card{cardID = F@_1};
dfp_read_field_def_c_pick_card(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_c_pick_card(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_c_pick_card(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_pick_card(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_c_pick_card(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_c_pick_card_cardID(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_pick_card(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_c_pick_card(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_c_pick_card(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_c_pick_card(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_c_pick_card(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_c_pick_card(<<>>, 0, 0, F@_1, _) ->
    #c_pick_card{cardID = F@_1}.

d_field_c_pick_card_cardID(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_c_pick_card_cardID(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_c_pick_card_cardID(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_c_pick_card(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_c_pick_card(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_c_pick_card(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_c_pick_card(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_c_pick_card(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_c_pick_card(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_pick_card(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_c_pick_card(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_pick_card(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_c_pick_card(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_pick_card(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_c_pick_card(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_c_pick_card(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_c_pick_card(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_c_pick_card(Rest, Z1, Z2, F@_1,
				   TrUserData).

d_msg_s_heart(Bin, TrUserData) ->
    dfp_read_field_def_s_heart(Bin, 0, 0,
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_heart(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_s_heart_timestamp(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_s_heart(<<>>, 0, 0, F@_1, _) ->
    #s_heart{timestamp = F@_1};
dfp_read_field_def_s_heart(Other, Z1, Z2, F@_1,
			   TrUserData) ->
    dg_read_field_def_s_heart(Other, Z1, Z2, F@_1,
			      TrUserData).

dg_read_field_def_s_heart(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_heart(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
dg_read_field_def_s_heart(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_heart_timestamp(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_s_heart(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_s_heart(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_s_heart(Rest, 0, 0, F@_1,
					      TrUserData);
	    3 ->
		skip_group_s_heart(Rest, Key bsr 3, 0, F@_1,
				   TrUserData);
	    5 -> skip_32_s_heart(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_s_heart(<<>>, 0, 0, F@_1, _) ->
    #s_heart{timestamp = F@_1}.

d_field_s_heart_timestamp(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_s_heart_timestamp(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_s_heart_timestamp(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_heart(RestF, 0, 0, NewFValue,
			       TrUserData).

skip_varint_s_heart(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    skip_varint_s_heart(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_s_heart(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    dfp_read_field_def_s_heart(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_length_delimited_s_heart(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_heart(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_s_heart(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_heart(Rest2, 0, 0, F@_1,
			       TrUserData).

skip_group_s_heart(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_heart(Rest, 0, Z2, F@_1,
			       TrUserData).

skip_32_s_heart(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_s_heart(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_64_s_heart(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_s_heart(Rest, Z1, Z2, F@_1,
			       TrUserData).

d_msg_c_rank_info(Bin, TrUserData) ->
    dfp_read_field_def_c_rank_info(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_c_rank_info(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_c_rank_info_tag(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_c_rank_info(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_c_rank_info_rank(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_c_rank_info(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #c_rank_info{tag = F@_1, rank = F@_2};
dfp_read_field_def_c_rank_info(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_c_rank_info(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_c_rank_info(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_rank_info(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_c_rank_info(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_c_rank_info_tag(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      16 ->
	  d_field_c_rank_info_rank(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_rank_info(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_c_rank_info(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_c_rank_info(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_c_rank_info(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_c_rank_info(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_c_rank_info(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #c_rank_info{tag = F@_1, rank = F@_2}.

d_field_c_rank_info_tag(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_c_rank_info_tag(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_c_rank_info_tag(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_rank_info(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_c_rank_info_rank(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_c_rank_info_rank(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_c_rank_info_rank(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_c_rank_info(RestF, 0, 0, F@_1,
				   NewFValue, TrUserData).

skip_varint_c_rank_info(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_c_rank_info(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_c_rank_info(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_c_rank_info(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_c_rank_info(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_rank_info(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_c_rank_info(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_rank_info(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_c_rank_info(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_rank_info(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_c_rank_info(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_c_rank_info(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_c_rank_info(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_c_rank_info(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

d_msg_s_pick_card(Bin, TrUserData) ->
    dfp_read_field_def_s_pick_card(Bin, 0, 0, TrUserData).

dfp_read_field_def_s_pick_card(<<>>, 0, 0, _) ->
    #s_pick_card{};
dfp_read_field_def_s_pick_card(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_s_pick_card(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_s_pick_card(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_pick_card(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_s_pick_card(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_s_pick_card(Rest, 0, 0, TrUserData);
      1 -> skip_64_s_pick_card(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_s_pick_card(Rest, 0, 0,
					    TrUserData);
      3 ->
	  skip_group_s_pick_card(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_s_pick_card(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_s_pick_card(<<>>, 0, 0, _) ->
    #s_pick_card{}.

skip_varint_s_pick_card(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_s_pick_card(Rest, Z1, Z2, TrUserData);
skip_varint_s_pick_card(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_s_pick_card(Rest, Z1, Z2,
				   TrUserData).

skip_length_delimited_s_pick_card(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_pick_card(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_s_pick_card(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_pick_card(Rest2, 0, 0, TrUserData).

skip_group_s_pick_card(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_pick_card(Rest, 0, Z2, TrUserData).

skip_32_s_pick_card(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_s_pick_card(Rest, Z1, Z2,
				   TrUserData).

skip_64_s_pick_card(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_s_pick_card(Rest, Z1, Z2,
				   TrUserData).

d_msg_s_rank_info(Bin, TrUserData) ->
    dfp_read_field_def_s_rank_info(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id([], TrUserData), TrUserData).

dfp_read_field_def_s_rank_info(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_s_rank_info_tag(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_s_rank_info(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_s_rank_info_rank_self(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_s_rank_info(<<26, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_s_rank_info_rank_info(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_s_rank_info(<<>>, 0, 0, F@_1, F@_2,
			       R1, TrUserData) ->
    #s_rank_info{tag = F@_1, rank_self = F@_2,
		 rank_info = lists_reverse(R1, TrUserData)};
dfp_read_field_def_s_rank_info(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, TrUserData) ->
    dg_read_field_def_s_rank_info(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

dg_read_field_def_s_rank_info(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_rank_info(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_s_rank_info(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_s_rank_info_tag(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      18 ->
	  d_field_s_rank_info_rank_self(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      26 ->
	  d_field_s_rank_info_rank_info(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_rank_info(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData);
	    1 ->
		skip_64_s_rank_info(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    2 ->
		skip_length_delimited_s_rank_info(Rest, 0, 0, F@_1,
						  F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_s_rank_info(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, TrUserData);
	    5 ->
		skip_32_s_rank_info(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData)
	  end
    end;
dg_read_field_def_s_rank_info(<<>>, 0, 0, F@_1, F@_2,
			      R1, TrUserData) ->
    #s_rank_info{tag = F@_1, rank_self = F@_2,
		 rank_info = lists_reverse(R1, TrUserData)}.

d_field_s_rank_info_tag(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_s_rank_info_tag(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_s_rank_info_tag(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_s_rank_info(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, TrUserData).

d_field_s_rank_info_rank_self(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_s_rank_info_rank_self(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_s_rank_info_rank_self(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_p_rank(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_s_rank_info(RestF, 0, 0, F@_1,
				   if Prev == undefined -> NewFValue;
				      true ->
					  merge_msg_p_rank(Prev, NewFValue,
							   TrUserData)
				   end,
				   F@_3, TrUserData).

d_field_s_rank_info_rank_info(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_s_rank_info_rank_info(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_s_rank_info_rank_info(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_p_rank(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_s_rank_info(RestF, 0, 0, F@_1, F@_2,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_s_rank_info(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_s_rank_info(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
skip_varint_s_rank_info(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_s_rank_info(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_length_delimited_s_rank_info(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_rank_info(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
skip_length_delimited_s_rank_info(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_rank_info(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, TrUserData).

skip_group_s_rank_info(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_rank_info(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_32_s_rank_info(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_s_rank_info(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_64_s_rank_info(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_s_rank_info(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

d_msg_s_player_info(Bin, TrUserData) ->
    dfp_read_field_def_s_player_info(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_player_info(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_player_info_gold(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_s_player_info(<<16, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_player_info_score(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_s_player_info(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #s_player_info{gold = F@_1, score = F@_2};
dfp_read_field_def_s_player_info(Other, Z1, Z2, F@_1,
				 F@_2, TrUserData) ->
    dg_read_field_def_s_player_info(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData).

dg_read_field_def_s_player_info(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_player_info(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_s_player_info(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_player_info_gold(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      16 ->
	  d_field_s_player_info_score(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_player_info(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    1 ->
		skip_64_s_player_info(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    2 ->
		skip_length_delimited_s_player_info(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    3 ->
		skip_group_s_player_info(Rest, Key bsr 3, 0, F@_1, F@_2,
					 TrUserData);
	    5 ->
		skip_32_s_player_info(Rest, 0, 0, F@_1, F@_2,
				      TrUserData)
	  end
    end;
dg_read_field_def_s_player_info(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #s_player_info{gold = F@_1, score = F@_2}.

d_field_s_player_info_gold(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_player_info_gold(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_s_player_info_gold(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_player_info(RestF, 0, 0, NewFValue,
				     F@_2, TrUserData).

d_field_s_player_info_score(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_player_info_score(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_s_player_info_score(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_player_info(RestF, 0, 0, F@_1,
				     NewFValue, TrUserData).

skip_varint_s_player_info(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_s_player_info(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
skip_varint_s_player_info(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_player_info(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_length_delimited_s_player_info(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_player_info(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_s_player_info(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_player_info(Rest2, 0, 0, F@_1,
				     F@_2, TrUserData).

skip_group_s_player_info(Bin, FNum, Z2, F@_1, F@_2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_player_info(Rest, 0, Z2, F@_1,
				     F@_2, TrUserData).

skip_32_s_player_info(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_player_info(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_64_s_player_info(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_player_info(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

d_msg_p_room(Bin, TrUserData) ->
    dfp_read_field_def_p_room(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_room(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_p_room_root_id(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_p_room(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_p_room_type(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_p_room(<<>>, 0, 0, F@_1, F@_2, _) ->
    #p_room{root_id = F@_1, type = F@_2};
dfp_read_field_def_p_room(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData) ->
    dg_read_field_def_p_room(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData).

dg_read_field_def_p_room(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_room(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
dg_read_field_def_p_room(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_room_root_id(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      16 ->
	  d_field_p_room_type(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_room(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_p_room(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_p_room(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    3 ->
		skip_group_p_room(Rest, Key bsr 3, 0, F@_1, F@_2,
				  TrUserData);
	    5 -> skip_32_p_room(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_p_room(<<>>, 0, 0, F@_1, F@_2, _) ->
    #p_room{root_id = F@_1, type = F@_2}.

d_field_p_room_root_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_p_room_root_id(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_p_room_root_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_p_room(RestF, 0, 0, NewFValue, F@_2,
			      TrUserData).

d_field_p_room_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_p_room_type(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_p_room_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_p_room(RestF, 0, 0, F@_1, NewFValue,
			      TrUserData).

skip_varint_p_room(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    skip_varint_p_room(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
skip_varint_p_room(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_p_room(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_length_delimited_p_room(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_room(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
skip_length_delimited_p_room(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_room(Rest2, 0, 0, F@_1, F@_2,
			      TrUserData).

skip_group_p_room(Bin, FNum, Z2, F@_1, F@_2,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_room(Rest, 0, Z2, F@_1, F@_2,
			      TrUserData).

skip_32_p_room(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_p_room(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_64_p_room(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_p_room(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

d_msg_s_login(Bin, TrUserData) ->
    dfp_read_field_def_s_login(Bin, 0, 0,
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_login(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_s_login_player_id(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_s_login(<<>>, 0, 0, F@_1, _) ->
    #s_login{player_id = F@_1};
dfp_read_field_def_s_login(Other, Z1, Z2, F@_1,
			   TrUserData) ->
    dg_read_field_def_s_login(Other, Z1, Z2, F@_1,
			      TrUserData).

dg_read_field_def_s_login(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_login(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
dg_read_field_def_s_login(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_s_login_player_id(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_s_login(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_s_login(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_s_login(Rest, 0, 0, F@_1,
					      TrUserData);
	    3 ->
		skip_group_s_login(Rest, Key bsr 3, 0, F@_1,
				   TrUserData);
	    5 -> skip_32_s_login(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_s_login(<<>>, 0, 0, F@_1, _) ->
    #s_login{player_id = F@_1}.

d_field_s_login_player_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_s_login_player_id(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_s_login_player_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_s_login(RestF, 0, 0, NewFValue,
			       TrUserData).

skip_varint_s_login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    skip_varint_s_login(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_s_login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    dfp_read_field_def_s_login(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_length_delimited_s_login(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_login(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_s_login(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_login(Rest2, 0, 0, F@_1,
			       TrUserData).

skip_group_s_login(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_login(Rest, 0, Z2, F@_1,
			       TrUserData).

skip_32_s_login(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_s_login(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_64_s_login(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_s_login(Rest, Z1, Z2, F@_1,
			       TrUserData).

d_msg_s_wash_card(Bin, TrUserData) ->
    dfp_read_field_def_s_wash_card(Bin, 0, 0,
				   id([], TrUserData), TrUserData).

dfp_read_field_def_s_wash_card(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_pfield_s_wash_card_cardIDs(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_s_wash_card(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_s_wash_card_cardIDs(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_s_wash_card(<<>>, 0, 0, R1,
			       TrUserData) ->
    #s_wash_card{cardIDs = lists_reverse(R1, TrUserData)};
dfp_read_field_def_s_wash_card(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_s_wash_card(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_s_wash_card(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_wash_card(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_s_wash_card(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_s_wash_card_cardIDs(Rest, 0, 0, F@_1,
				       TrUserData);
      8 ->
	  d_field_s_wash_card_cardIDs(Rest, 0, 0, F@_1,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_wash_card(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_s_wash_card(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_s_wash_card(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_s_wash_card(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_s_wash_card(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_s_wash_card(<<>>, 0, 0, R1,
			      TrUserData) ->
    #s_wash_card{cardIDs = lists_reverse(R1, TrUserData)}.

d_field_s_wash_card_cardIDs(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_s_wash_card_cardIDs(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_s_wash_card_cardIDs(<<0:1, X:7, Rest/binary>>,
			    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_wash_card(RestF, 0, 0,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

d_pfield_s_wash_card_cardIDs(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_pfield_s_wash_card_cardIDs(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_pfield_s_wash_card_cardIDs(<<0:1, X:7, Rest/binary>>,
			     N, Acc, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_s_wash_card_cardIDs(PackedBytes,
						0, 0, E),
    dfp_read_field_def_s_wash_card(Rest2, 0, 0, NewSeq,
				   TrUserData).

d_packed_field_s_wash_card_cardIDs(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, AccSeq)
    when N < 57 ->
    d_packed_field_s_wash_card_cardIDs(Rest, N + 7,
				       X bsl N + Acc, AccSeq);
d_packed_field_s_wash_card_cardIDs(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, AccSeq) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    d_packed_field_s_wash_card_cardIDs(RestF, 0, 0,
				       [NewFValue | AccSeq]);
d_packed_field_s_wash_card_cardIDs(<<>>, 0, 0,
				   AccSeq) ->
    AccSeq.

skip_varint_s_wash_card(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_s_wash_card(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_s_wash_card(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_s_wash_card(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_s_wash_card(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_wash_card(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_s_wash_card(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_wash_card(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_s_wash_card(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_wash_card(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_s_wash_card(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_s_wash_card(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_s_wash_card(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_s_wash_card(Rest, Z1, Z2, F@_1,
				   TrUserData).

d_msg_s_battle_status(Bin, TrUserData) ->
    dfp_read_field_def_s_battle_status(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_battle_status(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_battle_status_status(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_s_battle_status(<<16, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_battle_status_end_time(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_s_battle_status(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #s_battle_status{status = F@_1, end_time = F@_2};
dfp_read_field_def_s_battle_status(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData) ->
    dg_read_field_def_s_battle_status(Other, Z1, Z2, F@_1,
				      F@_2, TrUserData).

dg_read_field_def_s_battle_status(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_battle_status(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_s_battle_status(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_battle_status_status(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      16 ->
	  d_field_s_battle_status_end_time(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_battle_status(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    1 ->
		skip_64_s_battle_status(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    2 ->
		skip_length_delimited_s_battle_status(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    3 ->
		skip_group_s_battle_status(Rest, Key bsr 3, 0, F@_1,
					   F@_2, TrUserData);
	    5 ->
		skip_32_s_battle_status(Rest, 0, 0, F@_1, F@_2,
					TrUserData)
	  end
    end;
dg_read_field_def_s_battle_status(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #s_battle_status{status = F@_1, end_time = F@_2}.

d_field_s_battle_status_status(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_battle_status_status(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_s_battle_status_status(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_battle_status(RestF, 0, 0,
				       NewFValue, F@_2, TrUserData).

d_field_s_battle_status_end_time(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_battle_status_end_time(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_s_battle_status_end_time(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_battle_status(RestF, 0, 0, F@_1,
				       NewFValue, TrUserData).

skip_varint_s_battle_status(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_s_battle_status(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
skip_varint_s_battle_status(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_battle_status(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_length_delimited_s_battle_status(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_battle_status(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
skip_length_delimited_s_battle_status(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_battle_status(Rest2, 0, 0, F@_1,
				       F@_2, TrUserData).

skip_group_s_battle_status(Bin, FNum, Z2, F@_1, F@_2,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_battle_status(Rest, 0, Z2, F@_1,
				       F@_2, TrUserData).

skip_32_s_battle_status(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_battle_status(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_64_s_battle_status(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_battle_status(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

d_msg_c_login(Bin, TrUserData) ->
    dfp_read_field_def_c_login(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_c_login(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_c_login_player_id(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c_login(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_c_login_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c_login(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_c_login_head(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c_login(<<34, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_c_login_gender(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c_login(<<42, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_c_login_city(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c_login(<<50, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_c_login_province(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c_login(<<58, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_c_login_country(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c_login(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, _) ->
    #c_login{player_id = F@_1, name = F@_2, head = F@_3,
	     gender = F@_4, city = F@_5, province = F@_6,
	     country = F@_7};
dfp_read_field_def_c_login(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dg_read_field_def_c_login(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_c_login(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_login(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData);
dg_read_field_def_c_login(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_c_login_player_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, TrUserData);
      18 ->
	  d_field_c_login_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      26 ->
	  d_field_c_login_head(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      34 ->
	  d_field_c_login_gender(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, TrUserData);
      42 ->
	  d_field_c_login_city(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      50 ->
	  d_field_c_login_province(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, TrUserData);
      58 ->
	  d_field_c_login_country(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_login(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_c_login(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_c_login(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6, F@_7,
					      TrUserData);
	    3 ->
		skip_group_c_login(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_c_login(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_c_login(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, _) ->
    #c_login{player_id = F@_1, name = F@_2, head = F@_3,
	     gender = F@_4, city = F@_5, province = F@_6,
	     country = F@_7}.

d_field_c_login_player_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData)
    when N < 57 ->
    d_field_c_login_player_id(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData);
d_field_c_login_player_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_login(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_c_login_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_c_login_name(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_c_login_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_login(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_c_login_head(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_c_login_head(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_c_login_head(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_login(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_c_login_gender(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData)
    when N < 57 ->
    d_field_c_login_gender(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_c_login_gender(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
		       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_login(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_c_login_city(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_c_login_city(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_c_login_city(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_login(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_c_login_province(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData)
    when N < 57 ->
    d_field_c_login_province(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData);
d_field_c_login_province(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
			 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_login(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_c_login_country(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			TrUserData)
    when N < 57 ->
    d_field_c_login_country(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData);
d_field_c_login_country(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
			TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_login(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_c_login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    skip_varint_c_login(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_c_login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_c_login(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_c_login(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData)
    when N < 57 ->
    skip_length_delimited_c_login(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, TrUserData);
skip_length_delimited_c_login(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_login(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_c_login(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_login(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_c_login(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_c_login(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_c_login(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_c_login(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_msg_s_speak_card(Bin, TrUserData) ->
    dfp_read_field_def_s_speak_card(Bin, 0, 0,
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_speak_card(<<10, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_s_speak_card_descript(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_s_speak_card(<<>>, 0, 0, F@_1, _) ->
    #s_speak_card{descript = F@_1};
dfp_read_field_def_s_speak_card(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_s_speak_card(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_s_speak_card(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_speak_card(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_s_speak_card(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_s_speak_card_descript(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_speak_card(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_s_speak_card(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_s_speak_card(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_s_speak_card(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_s_speak_card(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_s_speak_card(<<>>, 0, 0, F@_1, _) ->
    #s_speak_card{descript = F@_1}.

d_field_s_speak_card_descript(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_s_speak_card_descript(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_s_speak_card_descript(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_s_speak_card(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_s_speak_card(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_s_speak_card(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_s_speak_card(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_s_speak_card(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_s_speak_card(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_speak_card(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_s_speak_card(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_speak_card(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_s_speak_card(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_speak_card(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_s_speak_card(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_s_speak_card(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_s_speak_card(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_s_speak_card(Rest, Z1, Z2, F@_1,
				    TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #p_target{} ->
	  merge_msg_p_target(Prev, New, TrUserData);
      #s_battle_start{} ->
	  merge_msg_s_battle_start(Prev, New, TrUserData);
      #c_player_info{} ->
	  merge_msg_c_player_info(Prev, New, TrUserData);
      #p_score{} -> merge_msg_p_score(Prev, New, TrUserData);
      #s_battle_end{} ->
	  merge_msg_s_battle_end(Prev, New, TrUserData);
      #c_get_player_id{} ->
	  merge_msg_c_get_player_id(Prev, New, TrUserData);
      #p_rank{} -> merge_msg_p_rank(Prev, New, TrUserData);
      #s_cancel_match{} ->
	  merge_msg_s_cancel_match(Prev, New, TrUserData);
      #s_follow_card{} ->
	  merge_msg_s_follow_card(Prev, New, TrUserData);
      #c_start_match{} ->
	  merge_msg_c_start_match(Prev, New, TrUserData);
      #c_heart{} -> merge_msg_c_heart(Prev, New, TrUserData);
      #s_show_card{} ->
	  merge_msg_s_show_card(Prev, New, TrUserData);
      #s_vote_card{} ->
	  merge_msg_s_vote_card(Prev, New, TrUserData);
      #s_single_game_end{} ->
	  merge_msg_s_single_game_end(Prev, New, TrUserData);
      #c_speak_card{} ->
	  merge_msg_c_speak_card(Prev, New, TrUserData);
      #c_vote_card{} ->
	  merge_msg_c_vote_card(Prev, New, TrUserData);
      #s_get_player_id{} ->
	  merge_msg_s_get_player_id(Prev, New, TrUserData);
      #c_follow_card{} ->
	  merge_msg_c_follow_card(Prev, New, TrUserData);
      #s_pick_speaker{} ->
	  merge_msg_s_pick_speaker(Prev, New, TrUserData);
      #p_card_vote{} ->
	  merge_msg_p_card_vote(Prev, New, TrUserData);
      #c_pick_card{} ->
	  merge_msg_c_pick_card(Prev, New, TrUserData);
      #s_heart{} -> merge_msg_s_heart(Prev, New, TrUserData);
      #c_rank_info{} ->
	  merge_msg_c_rank_info(Prev, New, TrUserData);
      #s_pick_card{} ->
	  merge_msg_s_pick_card(Prev, New, TrUserData);
      #s_rank_info{} ->
	  merge_msg_s_rank_info(Prev, New, TrUserData);
      #s_player_info{} ->
	  merge_msg_s_player_info(Prev, New, TrUserData);
      #p_room{} -> merge_msg_p_room(Prev, New, TrUserData);
      #s_login{} -> merge_msg_s_login(Prev, New, TrUserData);
      #s_wash_card{} ->
	  merge_msg_s_wash_card(Prev, New, TrUserData);
      #s_battle_status{} ->
	  merge_msg_s_battle_status(Prev, New, TrUserData);
      #c_login{} -> merge_msg_c_login(Prev, New, TrUserData);
      #s_speak_card{} ->
	  merge_msg_s_speak_card(Prev, New, TrUserData)
    end.

merge_msg_p_target(#p_target{},
		   #p_target{pos = NFpos, target_id = NFtarget_id,
			     target_name = NFtarget_name,
			     target_head = NFtarget_head,
			     target_gender = NFtarget_gender},
		   _) ->
    #p_target{pos = NFpos, target_id = NFtarget_id,
	      target_name = NFtarget_name,
	      target_head = NFtarget_head,
	      target_gender = NFtarget_gender}.

merge_msg_s_battle_start(#s_battle_start{targets =
					     PFtargets},
			 #s_battle_start{targets = NFtargets}, TrUserData) ->
    #s_battle_start{targets =
			if PFtargets /= undefined, NFtargets /= undefined ->
			       'erlang_++'(PFtargets, NFtargets, TrUserData);
			   PFtargets == undefined -> NFtargets;
			   NFtargets == undefined -> PFtargets
			end}.

merge_msg_c_player_info(#c_player_info{},
			#c_player_info{gold = NFgold, score = NFscore}, _) ->
    #c_player_info{gold = NFgold, score = NFscore}.

merge_msg_p_score(#p_score{},
		  #p_score{id = NFid, player_id = NFplayer_id,
			   score = NFscore},
		  _) ->
    #p_score{id = NFid, player_id = NFplayer_id,
	     score = NFscore}.

merge_msg_s_battle_end(#s_battle_end{score = PFscore},
		       #s_battle_end{mvp = NFmvp, higher = NFhigher,
				     score = NFscore},
		       TrUserData) ->
    #s_battle_end{mvp = NFmvp, higher = NFhigher,
		  score =
		      if PFscore /= undefined, NFscore /= undefined ->
			     'erlang_++'(PFscore, NFscore, TrUserData);
			 PFscore == undefined -> NFscore;
			 NFscore == undefined -> PFscore
		      end}.

merge_msg_c_get_player_id(#c_get_player_id{},
			  #c_get_player_id{code = NFcode}, _) ->
    #c_get_player_id{code = NFcode}.

merge_msg_p_rank(#p_rank{},
		 #p_rank{key = NFkey, value = NFvalue, rank = NFrank,
			 title = NFtitle, name = NFname, head = NFhead,
			 gender = NFgender},
		 _) ->
    #p_rank{key = NFkey, value = NFvalue, rank = NFrank,
	    title = NFtitle, name = NFname, head = NFhead,
	    gender = NFgender}.

merge_msg_s_cancel_match(_Prev, New, _TrUserData) ->
    New.

merge_msg_s_follow_card(#s_follow_card{},
			#s_follow_card{pos = NFpos, player_id = NFplayer_id},
			_) ->
    #s_follow_card{pos = NFpos, player_id = NFplayer_id}.

merge_msg_c_start_match(#c_start_match{},
			#c_start_match{type = NFtype}, _) ->
    #c_start_match{type = NFtype}.

merge_msg_c_heart(_Prev, New, _TrUserData) -> New.

merge_msg_s_show_card(#s_show_card{cardIDs = PFcardIDs},
		      #s_show_card{cardIDs = NFcardIDs}, TrUserData) ->
    #s_show_card{cardIDs =
		     if PFcardIDs /= undefined, NFcardIDs /= undefined ->
			    'erlang_++'(PFcardIDs, NFcardIDs, TrUserData);
			PFcardIDs == undefined -> NFcardIDs;
			NFcardIDs == undefined -> PFcardIDs
		     end}.

merge_msg_s_vote_card(#s_vote_card{},
		      #s_vote_card{pos = NFpos, player_id = NFplayer_id,
				   cardID = NFcardID},
		      _) ->
    #s_vote_card{pos = NFpos, player_id = NFplayer_id,
		 cardID = NFcardID}.

merge_msg_s_single_game_end(#s_single_game_end{score =
						   PFscore},
			    #s_single_game_end{cardID = NFcardID,
					       score = NFscore},
			    TrUserData) ->
    #s_single_game_end{cardID = NFcardID,
		       score =
			   if PFscore /= undefined, NFscore /= undefined ->
				  'erlang_++'(PFscore, NFscore, TrUserData);
			      PFscore == undefined -> NFscore;
			      NFscore == undefined -> PFscore
			   end}.

merge_msg_c_speak_card(#c_speak_card{},
		       #c_speak_card{descript = NFdescript}, _) ->
    #c_speak_card{descript = NFdescript}.

merge_msg_c_vote_card(#c_vote_card{},
		      #c_vote_card{cardID = NFcardID}, _) ->
    #c_vote_card{cardID = NFcardID}.

merge_msg_s_get_player_id(#s_get_player_id{},
			  #s_get_player_id{player_id = NFplayer_id}, _) ->
    #s_get_player_id{player_id = NFplayer_id}.

merge_msg_c_follow_card(#c_follow_card{},
			#c_follow_card{cardID = NFcardID}, _) ->
    #c_follow_card{cardID = NFcardID}.

merge_msg_s_pick_speaker(#s_pick_speaker{},
			 #s_pick_speaker{pos = NFpos, player_id = NFplayer_id},
			 _) ->
    #s_pick_speaker{pos = NFpos, player_id = NFplayer_id}.

merge_msg_p_card_vote(#p_card_vote{},
		      #p_card_vote{cardID = NFcardID, vote = NFvote}, _) ->
    #p_card_vote{cardID = NFcardID, vote = NFvote}.

merge_msg_c_pick_card(#c_pick_card{},
		      #c_pick_card{cardID = NFcardID}, _) ->
    #c_pick_card{cardID = NFcardID}.

merge_msg_s_heart(#s_heart{},
		  #s_heart{timestamp = NFtimestamp}, _) ->
    #s_heart{timestamp = NFtimestamp}.

merge_msg_c_rank_info(#c_rank_info{},
		      #c_rank_info{tag = NFtag, rank = NFrank}, _) ->
    #c_rank_info{tag = NFtag, rank = NFrank}.

merge_msg_s_pick_card(_Prev, New, _TrUserData) -> New.

merge_msg_s_rank_info(#s_rank_info{rank_self =
				       PFrank_self,
				   rank_info = PFrank_info},
		      #s_rank_info{tag = NFtag, rank_self = NFrank_self,
				   rank_info = NFrank_info},
		      TrUserData) ->
    #s_rank_info{tag = NFtag,
		 rank_self =
		     merge_msg_p_rank(PFrank_self, NFrank_self, TrUserData),
		 rank_info =
		     if PFrank_info /= undefined, NFrank_info /= undefined ->
			    'erlang_++'(PFrank_info, NFrank_info, TrUserData);
			PFrank_info == undefined -> NFrank_info;
			NFrank_info == undefined -> PFrank_info
		     end}.

merge_msg_s_player_info(#s_player_info{},
			#s_player_info{gold = NFgold, score = NFscore}, _) ->
    #s_player_info{gold = NFgold, score = NFscore}.

merge_msg_p_room(#p_room{},
		 #p_room{root_id = NFroot_id, type = NFtype}, _) ->
    #p_room{root_id = NFroot_id, type = NFtype}.

merge_msg_s_login(#s_login{},
		  #s_login{player_id = NFplayer_id}, _) ->
    #s_login{player_id = NFplayer_id}.

merge_msg_s_wash_card(#s_wash_card{cardIDs = PFcardIDs},
		      #s_wash_card{cardIDs = NFcardIDs}, TrUserData) ->
    #s_wash_card{cardIDs =
		     if PFcardIDs /= undefined, NFcardIDs /= undefined ->
			    'erlang_++'(PFcardIDs, NFcardIDs, TrUserData);
			PFcardIDs == undefined -> NFcardIDs;
			NFcardIDs == undefined -> PFcardIDs
		     end}.

merge_msg_s_battle_status(#s_battle_status{},
			  #s_battle_status{status = NFstatus,
					   end_time = NFend_time},
			  _) ->
    #s_battle_status{status = NFstatus,
		     end_time = NFend_time}.

merge_msg_c_login(#c_login{},
		  #c_login{player_id = NFplayer_id, name = NFname,
			   head = NFhead, gender = NFgender, city = NFcity,
			   province = NFprovince, country = NFcountry},
		  _) ->
    #c_login{player_id = NFplayer_id, name = NFname,
	     head = NFhead, gender = NFgender, city = NFcity,
	     province = NFprovince, country = NFcountry}.

merge_msg_s_speak_card(#s_speak_card{},
		       #s_speak_card{descript = NFdescript}, _) ->
    #s_speak_card{descript = NFdescript}.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #p_target{} ->
	  v_msg_p_target(Msg, [p_target], TrUserData);
      #s_battle_start{} ->
	  v_msg_s_battle_start(Msg, [s_battle_start], TrUserData);
      #c_player_info{} ->
	  v_msg_c_player_info(Msg, [c_player_info], TrUserData);
      #p_score{} -> v_msg_p_score(Msg, [p_score], TrUserData);
      #s_battle_end{} ->
	  v_msg_s_battle_end(Msg, [s_battle_end], TrUserData);
      #c_get_player_id{} ->
	  v_msg_c_get_player_id(Msg, [c_get_player_id],
				TrUserData);
      #p_rank{} -> v_msg_p_rank(Msg, [p_rank], TrUserData);
      #s_cancel_match{} ->
	  v_msg_s_cancel_match(Msg, [s_cancel_match], TrUserData);
      #s_follow_card{} ->
	  v_msg_s_follow_card(Msg, [s_follow_card], TrUserData);
      #c_start_match{} ->
	  v_msg_c_start_match(Msg, [c_start_match], TrUserData);
      #c_heart{} -> v_msg_c_heart(Msg, [c_heart], TrUserData);
      #s_show_card{} ->
	  v_msg_s_show_card(Msg, [s_show_card], TrUserData);
      #s_vote_card{} ->
	  v_msg_s_vote_card(Msg, [s_vote_card], TrUserData);
      #s_single_game_end{} ->
	  v_msg_s_single_game_end(Msg, [s_single_game_end],
				  TrUserData);
      #c_speak_card{} ->
	  v_msg_c_speak_card(Msg, [c_speak_card], TrUserData);
      #c_vote_card{} ->
	  v_msg_c_vote_card(Msg, [c_vote_card], TrUserData);
      #s_get_player_id{} ->
	  v_msg_s_get_player_id(Msg, [s_get_player_id],
				TrUserData);
      #c_follow_card{} ->
	  v_msg_c_follow_card(Msg, [c_follow_card], TrUserData);
      #s_pick_speaker{} ->
	  v_msg_s_pick_speaker(Msg, [s_pick_speaker], TrUserData);
      #p_card_vote{} ->
	  v_msg_p_card_vote(Msg, [p_card_vote], TrUserData);
      #c_pick_card{} ->
	  v_msg_c_pick_card(Msg, [c_pick_card], TrUserData);
      #s_heart{} -> v_msg_s_heart(Msg, [s_heart], TrUserData);
      #c_rank_info{} ->
	  v_msg_c_rank_info(Msg, [c_rank_info], TrUserData);
      #s_pick_card{} ->
	  v_msg_s_pick_card(Msg, [s_pick_card], TrUserData);
      #s_rank_info{} ->
	  v_msg_s_rank_info(Msg, [s_rank_info], TrUserData);
      #s_player_info{} ->
	  v_msg_s_player_info(Msg, [s_player_info], TrUserData);
      #p_room{} -> v_msg_p_room(Msg, [p_room], TrUserData);
      #s_login{} -> v_msg_s_login(Msg, [s_login], TrUserData);
      #s_wash_card{} ->
	  v_msg_s_wash_card(Msg, [s_wash_card], TrUserData);
      #s_battle_status{} ->
	  v_msg_s_battle_status(Msg, [s_battle_status],
				TrUserData);
      #c_login{} -> v_msg_c_login(Msg, [c_login], TrUserData);
      #s_speak_card{} ->
	  v_msg_s_speak_card(Msg, [s_speak_card], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_p_target/3}).
v_msg_p_target(#p_target{pos = F1, target_id = F2,
			 target_name = F3, target_head = F4,
			 target_gender = F5},
	       Path, _) ->
    v_type_uint32(F1, [pos | Path]),
    v_type_string(F2, [target_id | Path]),
    v_type_string(F3, [target_name | Path]),
    v_type_string(F4, [target_head | Path]),
    v_type_string(F5, [target_gender | Path]),
    ok;
v_msg_p_target(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_target}, X, Path).

-dialyzer({nowarn_function,v_msg_s_battle_start/3}).
v_msg_s_battle_start(#s_battle_start{targets = F1},
		     Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_p_target(Elem, [targets | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_target}}, F1,
			 [targets | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_c_player_info/3}).
v_msg_c_player_info(#c_player_info{gold = F1,
				   score = F2},
		    Path, _) ->
    v_type_uint32(F1, [gold | Path]),
    v_type_uint32(F2, [score | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_p_score/3}).
v_msg_p_score(#p_score{id = F1, player_id = F2,
		       score = F3},
	      Path, _) ->
    v_type_uint32(F1, [id | Path]),
    v_type_string(F2, [player_id | Path]),
    v_type_uint32(F3, [score | Path]),
    ok;
v_msg_p_score(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_score}, X, Path).

-dialyzer({nowarn_function,v_msg_s_battle_end/3}).
v_msg_s_battle_end(#s_battle_end{mvp = F1, higher = F2,
				 score = F3},
		   Path, TrUserData) ->
    v_type_string(F1, [mvp | Path]),
    v_type_string(F2, [higher | Path]),
    if is_list(F3) ->
	   _ = [v_msg_p_score(Elem, [score | Path], TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_score}}, F3,
			 [score | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_c_get_player_id/3}).
v_msg_c_get_player_id(#c_get_player_id{code = F1}, Path,
		      _) ->
    v_type_string(F1, [code | Path]), ok.

-dialyzer({nowarn_function,v_msg_p_rank/3}).
v_msg_p_rank(#p_rank{key = F1, value = F2, rank = F3,
		     title = F4, name = F5, head = F6, gender = F7},
	     Path, _) ->
    v_type_string(F1, [key | Path]),
    v_type_uint32(F2, [value | Path]),
    v_type_uint32(F3, [rank | Path]),
    v_type_uint32(F4, [title | Path]),
    v_type_string(F5, [name | Path]),
    v_type_string(F6, [head | Path]),
    v_type_string(F7, [gender | Path]),
    ok;
v_msg_p_rank(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_rank}, X, Path).

-dialyzer({nowarn_function,v_msg_s_cancel_match/3}).
v_msg_s_cancel_match(#s_cancel_match{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_s_follow_card/3}).
v_msg_s_follow_card(#s_follow_card{pos = F1,
				   player_id = F2},
		    Path, _) ->
    v_type_uint32(F1, [pos | Path]),
    v_type_string(F2, [player_id | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_c_start_match/3}).
v_msg_c_start_match(#c_start_match{type = F1}, Path,
		    _) ->
    v_type_uint32(F1, [type | Path]), ok.

-dialyzer({nowarn_function,v_msg_c_heart/3}).
v_msg_c_heart(#c_heart{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_s_show_card/3}).
v_msg_s_show_card(#s_show_card{cardIDs = F1}, Path,
		  _) ->
    if is_list(F1) ->
	   _ = [v_type_uint32(Elem, [cardIDs | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F1,
			 [cardIDs | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_s_vote_card/3}).
v_msg_s_vote_card(#s_vote_card{pos = F1, player_id = F2,
			       cardID = F3},
		  Path, _) ->
    v_type_uint32(F1, [pos | Path]),
    v_type_string(F2, [player_id | Path]),
    v_type_uint32(F3, [cardID | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_s_single_game_end/3}).
v_msg_s_single_game_end(#s_single_game_end{cardID = F1,
					   score = F2},
			Path, TrUserData) ->
    v_type_uint32(F1, [cardID | Path]),
    if is_list(F2) ->
	   _ = [v_msg_p_score(Elem, [score | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_score}}, F2,
			 [score | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_c_speak_card/3}).
v_msg_c_speak_card(#c_speak_card{descript = F1}, Path,
		   _) ->
    v_type_string(F1, [descript | Path]), ok.

-dialyzer({nowarn_function,v_msg_c_vote_card/3}).
v_msg_c_vote_card(#c_vote_card{cardID = F1}, Path, _) ->
    v_type_uint32(F1, [cardID | Path]), ok.

-dialyzer({nowarn_function,v_msg_s_get_player_id/3}).
v_msg_s_get_player_id(#s_get_player_id{player_id = F1},
		      Path, _) ->
    v_type_string(F1, [player_id | Path]), ok.

-dialyzer({nowarn_function,v_msg_c_follow_card/3}).
v_msg_c_follow_card(#c_follow_card{cardID = F1}, Path,
		    _) ->
    v_type_uint32(F1, [cardID | Path]), ok.

-dialyzer({nowarn_function,v_msg_s_pick_speaker/3}).
v_msg_s_pick_speaker(#s_pick_speaker{pos = F1,
				     player_id = F2},
		     Path, _) ->
    v_type_uint32(F1, [pos | Path]),
    v_type_string(F2, [player_id | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_p_card_vote/3}).
v_msg_p_card_vote(#p_card_vote{cardID = F1, vote = F2},
		  Path, _) ->
    v_type_uint32(F1, [cardID | Path]),
    v_type_uint32(F2, [vote | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_c_pick_card/3}).
v_msg_c_pick_card(#c_pick_card{cardID = F1}, Path, _) ->
    v_type_uint32(F1, [cardID | Path]), ok.

-dialyzer({nowarn_function,v_msg_s_heart/3}).
v_msg_s_heart(#s_heart{timestamp = F1}, Path, _) ->
    v_type_uint32(F1, [timestamp | Path]), ok.

-dialyzer({nowarn_function,v_msg_c_rank_info/3}).
v_msg_c_rank_info(#c_rank_info{tag = F1, rank = F2},
		  Path, _) ->
    v_type_string(F1, [tag | Path]),
    v_type_uint32(F2, [rank | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_s_pick_card/3}).
v_msg_s_pick_card(#s_pick_card{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_s_rank_info/3}).
v_msg_s_rank_info(#s_rank_info{tag = F1, rank_self = F2,
			       rank_info = F3},
		  Path, TrUserData) ->
    v_type_string(F1, [tag | Path]),
    v_msg_p_rank(F2, [rank_self | Path], TrUserData),
    if is_list(F3) ->
	   _ = [v_msg_p_rank(Elem, [rank_info | Path], TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_rank}}, F3,
			 [rank_info | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_s_player_info/3}).
v_msg_s_player_info(#s_player_info{gold = F1,
				   score = F2},
		    Path, _) ->
    v_type_uint32(F1, [gold | Path]),
    v_type_uint32(F2, [score | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_p_room/3}).
v_msg_p_room(#p_room{root_id = F1, type = F2}, Path,
	     _) ->
    v_type_uint32(F1, [root_id | Path]),
    v_type_uint32(F2, [type | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_s_login/3}).
v_msg_s_login(#s_login{player_id = F1}, Path, _) ->
    v_type_string(F1, [player_id | Path]), ok.

-dialyzer({nowarn_function,v_msg_s_wash_card/3}).
v_msg_s_wash_card(#s_wash_card{cardIDs = F1}, Path,
		  _) ->
    if is_list(F1) ->
	   _ = [v_type_uint32(Elem, [cardIDs | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F1,
			 [cardIDs | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_s_battle_status/3}).
v_msg_s_battle_status(#s_battle_status{status = F1,
				       end_time = F2},
		      Path, _) ->
    v_type_uint32(F1, [status | Path]),
    v_type_uint32(F2, [end_time | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_c_login/3}).
v_msg_c_login(#c_login{player_id = F1, name = F2,
		       head = F3, gender = F4, city = F5, province = F6,
		       country = F7},
	      Path, _) ->
    v_type_string(F1, [player_id | Path]),
    v_type_string(F2, [name | Path]),
    v_type_string(F3, [head | Path]),
    v_type_string(F4, [gender | Path]),
    v_type_string(F5, [city | Path]),
    v_type_string(F6, [province | Path]),
    v_type_string(F7, [country | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_s_speak_card/3}).
v_msg_s_speak_card(#s_speak_card{descript = F1}, Path,
		   _) ->
    v_type_string(F1, [descript | Path]), ok.

-dialyzer({nowarn_function,v_type_uint32/2}).
v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, msgID},
      [{none, 0}, {c_get_player_id, 1001},
       {s_get_player_id, 1002}, {c_login, 1003},
       {s_login, 1004}, {c_heart, 1005}, {s_heart, 1006},
       {c_player_info, 1101}, {s_player_info, 1103},
       {c_start_match, 1104}, {s_cancel_match, 1105},
       {s_battle_start, 1201}, {s_battle_state, 1202},
       {s_wash_card, 1203}, {s_pick_speaker, 1204},
       {c_pick_card, 1205}, {s_pick_card, 1206},
       {c_speak_card, 1207}, {s_speak_card, 1208},
       {c_follow_card, 1209}, {s_follow_card, 1210},
       {c_show_card, 1211}, {c_vote_card, 1212},
       {s_vote_card, 1213}, {s_single_game_end, 1214},
       {s_battle_end, 1215}, {c_rank_info, 1301},
       {s_rank_info, 1302}]},
     {{msg, p_target},
      [#field{name = pos, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = target_id, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = target_name, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []},
       #field{name = target_head, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []},
       #field{name = target_gender, fnum = 5, rnum = 6,
	      type = string, occurrence = required, opts = []}]},
     {{msg, s_battle_start},
      [#field{name = targets, fnum = 1, rnum = 2,
	      type = {msg, p_target}, occurrence = repeated,
	      opts = []}]},
     {{msg, c_player_info},
      [#field{name = gold, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = score, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, p_score},
      [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = player_id, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = score, fnum = 3, rnum = 4, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, s_battle_end},
      [#field{name = mvp, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = higher, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = score, fnum = 3, rnum = 4,
	      type = {msg, p_score}, occurrence = repeated,
	      opts = []}]},
     {{msg, c_get_player_id},
      [#field{name = code, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, p_rank},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = rank, fnum = 3, rnum = 4, type = uint32,
	      occurrence = required, opts = []},
       #field{name = title, fnum = 4, rnum = 5, type = uint32,
	      occurrence = required, opts = []},
       #field{name = name, fnum = 5, rnum = 6, type = string,
	      occurrence = required, opts = []},
       #field{name = head, fnum = 6, rnum = 7, type = string,
	      occurrence = required, opts = []},
       #field{name = gender, fnum = 7, rnum = 8, type = string,
	      occurrence = required, opts = []}]},
     {{msg, s_cancel_match}, []},
     {{msg, s_follow_card},
      [#field{name = pos, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = player_id, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, c_start_match},
      [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, c_heart}, []},
     {{msg, s_show_card},
      [#field{name = cardIDs, fnum = 1, rnum = 2,
	      type = uint32, occurrence = repeated, opts = []}]},
     {{msg, s_vote_card},
      [#field{name = pos, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = player_id, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = cardID, fnum = 3, rnum = 4, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, s_single_game_end},
      [#field{name = cardID, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = score, fnum = 2, rnum = 3,
	      type = {msg, p_score}, occurrence = repeated,
	      opts = []}]},
     {{msg, c_speak_card},
      [#field{name = descript, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, c_vote_card},
      [#field{name = cardID, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, s_get_player_id},
      [#field{name = player_id, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, c_follow_card},
      [#field{name = cardID, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, s_pick_speaker},
      [#field{name = pos, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = player_id, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, p_card_vote},
      [#field{name = cardID, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = vote, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, c_pick_card},
      [#field{name = cardID, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, s_heart},
      [#field{name = timestamp, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, c_rank_info},
      [#field{name = tag, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = rank, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, s_pick_card}, []},
     {{msg, s_rank_info},
      [#field{name = tag, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = rank_self, fnum = 2, rnum = 3,
	      type = {msg, p_rank}, occurrence = required, opts = []},
       #field{name = rank_info, fnum = 3, rnum = 4,
	      type = {msg, p_rank}, occurrence = repeated,
	      opts = []}]},
     {{msg, s_player_info},
      [#field{name = gold, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = score, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, p_room},
      [#field{name = root_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = type, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, s_login},
      [#field{name = player_id, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, s_wash_card},
      [#field{name = cardIDs, fnum = 1, rnum = 2,
	      type = uint32, occurrence = repeated, opts = []}]},
     {{msg, s_battle_status},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = end_time, fnum = 2, rnum = 3,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, c_login},
      [#field{name = player_id, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = head, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []},
       #field{name = gender, fnum = 4, rnum = 5, type = string,
	      occurrence = required, opts = []},
       #field{name = city, fnum = 5, rnum = 6, type = string,
	      occurrence = required, opts = []},
       #field{name = province, fnum = 6, rnum = 7,
	      type = string, occurrence = required, opts = []},
       #field{name = country, fnum = 7, rnum = 8,
	      type = string, occurrence = required, opts = []}]},
     {{msg, s_speak_card},
      [#field{name = descript, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]}].


get_msg_names() ->
    [p_target, s_battle_start, c_player_info, p_score,
     s_battle_end, c_get_player_id, p_rank, s_cancel_match,
     s_follow_card, c_start_match, c_heart, s_show_card,
     s_vote_card, s_single_game_end, c_speak_card,
     c_vote_card, s_get_player_id, c_follow_card,
     s_pick_speaker, p_card_vote, c_pick_card, s_heart,
     c_rank_info, s_pick_card, s_rank_info, s_player_info,
     p_room, s_login, s_wash_card, s_battle_status, c_login,
     s_speak_card].


get_group_names() -> [].


get_msg_or_group_names() ->
    [p_target, s_battle_start, c_player_info, p_score,
     s_battle_end, c_get_player_id, p_rank, s_cancel_match,
     s_follow_card, c_start_match, c_heart, s_show_card,
     s_vote_card, s_single_game_end, c_speak_card,
     c_vote_card, s_get_player_id, c_follow_card,
     s_pick_speaker, p_card_vote, c_pick_card, s_heart,
     c_rank_info, s_pick_card, s_rank_info, s_player_info,
     p_room, s_login, s_wash_card, s_battle_status, c_login,
     s_speak_card].


get_enum_names() -> [msgID].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(p_target) ->
    [#field{name = pos, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = target_id, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = target_name, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []},
     #field{name = target_head, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []},
     #field{name = target_gender, fnum = 5, rnum = 6,
	    type = string, occurrence = required, opts = []}];
find_msg_def(s_battle_start) ->
    [#field{name = targets, fnum = 1, rnum = 2,
	    type = {msg, p_target}, occurrence = repeated,
	    opts = []}];
find_msg_def(c_player_info) ->
    [#field{name = gold, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = score, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(p_score) ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = player_id, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = score, fnum = 3, rnum = 4, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(s_battle_end) ->
    [#field{name = mvp, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = higher, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = score, fnum = 3, rnum = 4,
	    type = {msg, p_score}, occurrence = repeated,
	    opts = []}];
find_msg_def(c_get_player_id) ->
    [#field{name = code, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def(p_rank) ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = rank, fnum = 3, rnum = 4, type = uint32,
	    occurrence = required, opts = []},
     #field{name = title, fnum = 4, rnum = 5, type = uint32,
	    occurrence = required, opts = []},
     #field{name = name, fnum = 5, rnum = 6, type = string,
	    occurrence = required, opts = []},
     #field{name = head, fnum = 6, rnum = 7, type = string,
	    occurrence = required, opts = []},
     #field{name = gender, fnum = 7, rnum = 8, type = string,
	    occurrence = required, opts = []}];
find_msg_def(s_cancel_match) -> [];
find_msg_def(s_follow_card) ->
    [#field{name = pos, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = player_id, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def(c_start_match) ->
    [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(c_heart) -> [];
find_msg_def(s_show_card) ->
    [#field{name = cardIDs, fnum = 1, rnum = 2,
	    type = uint32, occurrence = repeated, opts = []}];
find_msg_def(s_vote_card) ->
    [#field{name = pos, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = player_id, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = cardID, fnum = 3, rnum = 4, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(s_single_game_end) ->
    [#field{name = cardID, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = score, fnum = 2, rnum = 3,
	    type = {msg, p_score}, occurrence = repeated,
	    opts = []}];
find_msg_def(c_speak_card) ->
    [#field{name = descript, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def(c_vote_card) ->
    [#field{name = cardID, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(s_get_player_id) ->
    [#field{name = player_id, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def(c_follow_card) ->
    [#field{name = cardID, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(s_pick_speaker) ->
    [#field{name = pos, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = player_id, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def(p_card_vote) ->
    [#field{name = cardID, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = vote, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(c_pick_card) ->
    [#field{name = cardID, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(s_heart) ->
    [#field{name = timestamp, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(c_rank_info) ->
    [#field{name = tag, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = rank, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(s_pick_card) -> [];
find_msg_def(s_rank_info) ->
    [#field{name = tag, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = rank_self, fnum = 2, rnum = 3,
	    type = {msg, p_rank}, occurrence = required, opts = []},
     #field{name = rank_info, fnum = 3, rnum = 4,
	    type = {msg, p_rank}, occurrence = repeated,
	    opts = []}];
find_msg_def(s_player_info) ->
    [#field{name = gold, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = score, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(p_room) ->
    [#field{name = root_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = type, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(s_login) ->
    [#field{name = player_id, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def(s_wash_card) ->
    [#field{name = cardIDs, fnum = 1, rnum = 2,
	    type = uint32, occurrence = repeated, opts = []}];
find_msg_def(s_battle_status) ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = end_time, fnum = 2, rnum = 3,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(c_login) ->
    [#field{name = player_id, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = head, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []},
     #field{name = gender, fnum = 4, rnum = 5, type = string,
	    occurrence = required, opts = []},
     #field{name = city, fnum = 5, rnum = 6, type = string,
	    occurrence = required, opts = []},
     #field{name = province, fnum = 6, rnum = 7,
	    type = string, occurrence = required, opts = []},
     #field{name = country, fnum = 7, rnum = 8,
	    type = string, occurrence = required, opts = []}];
find_msg_def(s_speak_card) ->
    [#field{name = descript, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(msgID) ->
    [{none, 0}, {c_get_player_id, 1001},
     {s_get_player_id, 1002}, {c_login, 1003},
     {s_login, 1004}, {c_heart, 1005}, {s_heart, 1006},
     {c_player_info, 1101}, {s_player_info, 1103},
     {c_start_match, 1104}, {s_cancel_match, 1105},
     {s_battle_start, 1201}, {s_battle_state, 1202},
     {s_wash_card, 1203}, {s_pick_speaker, 1204},
     {c_pick_card, 1205}, {s_pick_card, 1206},
     {c_speak_card, 1207}, {s_speak_card, 1208},
     {c_follow_card, 1209}, {s_follow_card, 1210},
     {c_show_card, 1211}, {c_vote_card, 1212},
     {s_vote_card, 1213}, {s_single_game_end, 1214},
     {s_battle_end, 1215}, {c_rank_info, 1301},
     {s_rank_info, 1302}];
find_enum_def(_) -> error.


enum_symbol_by_value(msgID, Value) ->
    enum_symbol_by_value_msgID(Value).


enum_value_by_symbol(msgID, Sym) ->
    enum_value_by_symbol_msgID(Sym).


enum_symbol_by_value_msgID(0) -> none;
enum_symbol_by_value_msgID(1001) -> c_get_player_id;
enum_symbol_by_value_msgID(1002) -> s_get_player_id;
enum_symbol_by_value_msgID(1003) -> c_login;
enum_symbol_by_value_msgID(1004) -> s_login;
enum_symbol_by_value_msgID(1005) -> c_heart;
enum_symbol_by_value_msgID(1006) -> s_heart;
enum_symbol_by_value_msgID(1101) -> c_player_info;
enum_symbol_by_value_msgID(1103) -> s_player_info;
enum_symbol_by_value_msgID(1104) -> c_start_match;
enum_symbol_by_value_msgID(1105) -> s_cancel_match;
enum_symbol_by_value_msgID(1201) -> s_battle_start;
enum_symbol_by_value_msgID(1202) -> s_battle_state;
enum_symbol_by_value_msgID(1203) -> s_wash_card;
enum_symbol_by_value_msgID(1204) -> s_pick_speaker;
enum_symbol_by_value_msgID(1205) -> c_pick_card;
enum_symbol_by_value_msgID(1206) -> s_pick_card;
enum_symbol_by_value_msgID(1207) -> c_speak_card;
enum_symbol_by_value_msgID(1208) -> s_speak_card;
enum_symbol_by_value_msgID(1209) -> c_follow_card;
enum_symbol_by_value_msgID(1210) -> s_follow_card;
enum_symbol_by_value_msgID(1211) -> c_show_card;
enum_symbol_by_value_msgID(1212) -> c_vote_card;
enum_symbol_by_value_msgID(1213) -> s_vote_card;
enum_symbol_by_value_msgID(1214) -> s_single_game_end;
enum_symbol_by_value_msgID(1215) -> s_battle_end;
enum_symbol_by_value_msgID(1301) -> c_rank_info;
enum_symbol_by_value_msgID(1302) -> s_rank_info.


enum_value_by_symbol_msgID(none) -> 0;
enum_value_by_symbol_msgID(c_get_player_id) -> 1001;
enum_value_by_symbol_msgID(s_get_player_id) -> 1002;
enum_value_by_symbol_msgID(c_login) -> 1003;
enum_value_by_symbol_msgID(s_login) -> 1004;
enum_value_by_symbol_msgID(c_heart) -> 1005;
enum_value_by_symbol_msgID(s_heart) -> 1006;
enum_value_by_symbol_msgID(c_player_info) -> 1101;
enum_value_by_symbol_msgID(s_player_info) -> 1103;
enum_value_by_symbol_msgID(c_start_match) -> 1104;
enum_value_by_symbol_msgID(s_cancel_match) -> 1105;
enum_value_by_symbol_msgID(s_battle_start) -> 1201;
enum_value_by_symbol_msgID(s_battle_state) -> 1202;
enum_value_by_symbol_msgID(s_wash_card) -> 1203;
enum_value_by_symbol_msgID(s_pick_speaker) -> 1204;
enum_value_by_symbol_msgID(c_pick_card) -> 1205;
enum_value_by_symbol_msgID(s_pick_card) -> 1206;
enum_value_by_symbol_msgID(c_speak_card) -> 1207;
enum_value_by_symbol_msgID(s_speak_card) -> 1208;
enum_value_by_symbol_msgID(c_follow_card) -> 1209;
enum_value_by_symbol_msgID(s_follow_card) -> 1210;
enum_value_by_symbol_msgID(c_show_card) -> 1211;
enum_value_by_symbol_msgID(c_vote_card) -> 1212;
enum_value_by_symbol_msgID(s_vote_card) -> 1213;
enum_value_by_symbol_msgID(s_single_game_end) -> 1214;
enum_value_by_symbol_msgID(s_battle_end) -> 1215;
enum_value_by_symbol_msgID(c_rank_info) -> 1301;
enum_value_by_symbol_msgID(s_rank_info) -> 1302.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.1.9".

gpb_version_as_list() ->
    [4,1,9].
